{
  "timestamp": "2025-07-14T07:35:05.323556",
  "total_tests": 4,
  "successful_tests": 0,
  "failed_tests": 4,
  "results": [
    {
      "name": "Native環境でのtest_wifi_managerテスト",
      "success": false,
      "duration": 6.093218564987183,
      "timestamp": "2025-07-14T07:34:52.850217",
      "output": "Verbosity level can be increased via `-v, -vv, or -vvv` option\nCollected 1 tests\n\nProcessing * in native environment\n--------------------------------------------------------------------------------\nBuilding...\n\n",
      "error_output": "In file included from test\\test_button_manager_native.cpp:3:\nlib/M5Stack.h:140:9: warning: 'TFT_ORANGE' redefined\n  140 | #define TFT_ORANGE    0xFDA0\n      |         ^~~~~~~~~~\nIn file included from src/button_manager.h:5,\n                 from test\\test_button_manager_native.cpp:2:\nsrc/../test/mocks/mock_m5stack.h:144:9: note: this is the location of the previous definition\n  144 | #define TFT_ORANGE 0xFD20\n      |         ^~~~~~~~~~\nIn file included from src/button_manager.h:6:\nsrc/debounce_manager.h:12:34: error: 'Button' has not been declared\n   12 |   static bool canProcessHardware(Button& button);\n      |                                  ^~~~~~\nsrc/button_manager.h:23:28: error: 'Button' has not been declared\n   23 |   static bool isShortPress(Button& button, unsigned long threshold = 1000);\n      |                            ^~~~~~\nsrc/button_manager.h:24:27: error: 'Button' has not been declared\n   24 |   static bool isLongPress(Button& button, unsigned long threshold = 1000);\n      |                           ^~~~~~\nsrc/button_manager.h:25:26: error: 'Button' has not been declared\n   25 |   static bool isReleased(Button& button);\n      |                          ^~~~~~\nsrc/button_manager.h:30:38: error: 'Button' has not been declared\n   30 |   static ButtonState* getButtonState(Button& button);\n      |                                      ^~~~~~\nsrc/button_manager.h:33:32: error: 'Button' has not been declared\n   33 |   static bool canProcessButton(Button& button);\n      |                                ^~~~~~\nsrc/button_manager.h:40:19: error: 'Button' was not declared in this scope\n   40 |   static std::map<Button*, ButtonState> buttonStates;\n      |                   ^~~~~~\nsrc/button_manager.h:40:39: error: template argument 1 is invalid\n   40 |   static std::map<Button*, ButtonState> buttonStates;\n      |                                       ^\nsrc/button_manager.h:40:39: error: template argument 3 is invalid\nsrc/button_manager.h:40:39: error: template argument 4 is invalid\nsrc/button_manager.h:44:33: error: 'Button' has not been declared\n   44 |   static void updateButtonState(Button& button, unsigned long currentTime);\n      |                                 ^~~~~~\nsrc/button_manager.h:46:46: error: 'Button' has not been declared\n   46 |   static ButtonState& getOrCreateButtonState(Button& button);\n      |                                              ^~~~~~\nIn file included from lib/M5Stack.h:7:\nlib/Arduino.h:97:20: error: conflicting declaration 'SerialClass Serial'\n   97 | extern SerialClass Serial;\n      |                    ^~~~~~\nsrc/../test/mocks/mock_m5stack.h:225:19: note: previous declaration as 'MockSerial Serial'\n  225 | extern MockSerial Serial;\n      |                   ^~~~~~\nlib/Arduino.h:164:20: error: conflicting declaration 'EEPROMClass EEPROM'\n  164 | extern EEPROMClass EEPROM;\n      |                    ^~~~~~\nsrc/../test/mocks/mock_m5stack.h:246:19: note: previous declaration as 'MockEEPROM EEPROM'\n  246 | extern MockEEPROM EEPROM;\n      |                   ^~~~~~\nlib/M5Stack.h:121:16: error: conflicting declaration 'M5Stack M5'\n  121 | extern M5Stack M5;\n      |                ^~\nsrc/../test/mocks/mock_m5stack.h:116:20: note: previous declaration as 'MockM5Stack M5'\n  116 | extern MockM5Stack M5;\n      |                    ^~\ntest\\test_button_manager_native.cpp: In function 'void test_button_manager_initialization()':\ntest\\test_button_manager_native.cpp:58:58: error: cannot convert 'MockM5Stack::Button' to 'int&'\n   58 |   ButtonState* stateA = ButtonManager::getButtonState(M5.BtnA);\n      |                                                       ~~~^~~~\n      |                                                          |\n      |                                                          MockM5Stack::Button\nsrc/button_manager.h:30:46: note: initializing argument 1 of 'static ButtonState* ButtonManager::getButtonState(int&)'\n   30 |   static ButtonState* getButtonState(Button& button);\n      |                                      ~~~~~~~~^~~~~~\ntest\\test_button_manager_native.cpp:59:58: error: cannot convert 'MockM5Stack::Button' to 'int&'\n   59 |   ButtonState* stateB = ButtonManager::getButtonState(M5.BtnB);\n      |                                                       ~~~^~~~\n      |                                                          |\n      |                                                          MockM5Stack::Button\nsrc/button_manager.h:30:46: note: initializing argument 1 of 'static ButtonState* ButtonManager::getButtonState(int&)'\n   30 |   static ButtonState* getButtonState(Button& button);\n      |                                      ~~~~~~~~^~~~~~\ntest\\test_button_manager_native.cpp:60:58: error: cannot convert 'MockM5Stack::Button' to 'int&'\n   60 |   ButtonState* stateC = ButtonManager::getButtonState(M5.BtnC);\n      |                                                       ~~~^~~~\n      |                                                          |\n      |                                                          MockM5Stack::Button\nsrc/button_manager.h:30:46: note: initializing argument 1 of 'static ButtonState* ButtonManager::getButtonState(int&)'\n   30 |   static ButtonState* getButtonState(Button& button);\n      |                                      ~~~~~~~~^~~~~~\ntest\\test_button_manager_native.cpp: In function 'void test_short_press_detection()':\ntest\\test_button_manager_native.cpp:80:49: error: cannot convert 'MockM5Stack::Button' to 'int&'\n   80 |   bool isShort = ButtonManager::isShortPress(M5.BtnA, 1000);\n      |                                              ~~~^~~~\n      |                                                 |\n      |                                                 MockM5Stack::Button\nsrc/button_manager.h:23:36: note: initializing argument 1 of 'static bool ButtonManager::isShortPress(int&, long unsigned int)'\n   23 |   static bool isShortPress(Button& button, unsigned long threshold = 1000);\n      |                            ~~~~~~~~^~~~~~\ntest\\test_button_manager_native.cpp: In function 'void test_long_press_detection()':\ntest\\test_button_manager_native.cpp:95:47: error: cannot convert 'MockM5Stack::Button' to 'int&'\n   95 |   bool isLong = ButtonManager::isLongPress(M5.BtnA, 1000);\n      |                                            ~~~^~~~\n      |                                               |\n      |                                               MockM5Stack::Button\nsrc/button_manager.h:24:35: note: initializing argument 1 of 'static bool ButtonManager::isLongPress(int&, long unsigned int)'\n   24 |   static bool isLongPress(Button& button, unsigned long threshold = 1000);\n      |                           ~~~~~~~~^~~~~~\ntest\\test_button_manager_native.cpp: In function 'void test_release_detection()':\ntest\\test_button_manager_native.cpp:111:50: error: cannot convert 'MockM5Stack::Button' to 'int&'\n  111 |   bool isReleased = ButtonManager::isReleased(M5.BtnA);\n      |                                               ~~~^~~~\n      |                                                  |\n      |                                                  MockM5Stack::Button\nsrc/button_manager.h:25:34: note: initializing argument 1 of 'static bool ButtonManager::isReleased(int&)'\n   25 |   static bool isReleased(Button& button);\n      |                          ~~~~~~~~^~~~~~\ntest\\test_button_manager_native.cpp: In function 'void test_debounce_processing()':\ntest\\test_button_manager_native.cpp:119:56: error: cannot convert 'MockM5Stack::Button' to 'int&'\n  119 |   bool canProcess = ButtonManager::canProcessButton(M5.BtnA);\n      |                                                     ~~~^~~~\n      |                                                        |\n      |                                                        MockM5Stack::Button\nsrc/button_manager.h:33:40: note: initializing argument 1 of 'static bool ButtonManager::canProcessButton(int&)'\n   33 |   static bool canProcessButton(Button& button);\n      |                                ~~~~~~~~^~~~~~\ntest\\test_button_manager_native.cpp: In function 'void test_state_management()':\ntest\\test_button_manager_native.cpp:128:57: error: cannot convert 'MockM5Stack::Button' to 'int&'\n  128 |   ButtonState* state = ButtonManager::getButtonState(M5.BtnA);\n      |                                                      ~~~^~~~\n      |                                                         |\n      |                                                         MockM5Stack::Button\nsrc/button_manager.h:30:46: note: initializing argument 1 of 'static ButtonState* ButtonManager::getButtonState(int&)'\n   30 |   static ButtonState* getButtonState(Button& button);\n      |                                      ~~~~~~~~^~~~~~\ntest\\test_button_manager_native.cpp: In function 'void test_multiple_button_management()':\ntest\\test_button_manager_native.cpp:143:58: error: cannot convert 'MockM5Stack::Button' to 'int&'\n  143 |   ButtonState* stateA = ButtonManager::getButtonState(M5.BtnA);\n      |                                                       ~~~^~~~\n      |                                                          |\n      |                                                          MockM5Stack::Button\nsrc/button_manager.h:30:46: note: initializing argument 1 of 'static ButtonState* ButtonManager::getButtonState(int&)'\n   30 |   static ButtonState* getButtonState(Button& button);\n      |                                      ~~~~~~~~^~~~~~\ntest\\test_button_manager_native.cpp:144:58: error: cannot convert 'MockM5Stack::Button' to 'int&'\n  144 |   ButtonState* stateB = ButtonManager::getButtonState(M5.BtnB);\n      |                                                       ~~~^~~~\n      |                                                          |\n      |                                                          MockM5Stack::Button\nsrc/button_manager.h:30:46: note: initializing argument 1 of 'static ButtonState* ButtonManager::getButtonState(int&)'\n   30 |   static ButtonState* getButtonState(Button& button);\n      |                                      ~~~~~~~~^~~~~~\ntest\\test_button_manager_native.cpp: In function 'void test_state_reset()':\ntest\\test_button_manager_native.cpp:160:57: error: cannot convert 'MockM5Stack::Button' to 'int&'\n  160 |   ButtonState* state = ButtonManager::getButtonState(M5.BtnA);\n      |                                                      ~~~^~~~\n      |                                                         |\n      |                                                         MockM5Stack::Button\nsrc/button_manager.h:30:46: note: initializing argument 1 of 'static ButtonState* ButtonManager::getButtonState(int&)'\n   30 |   static ButtonState* getButtonState(Button& button);\n      |                                      ~~~~~~~~^~~~~~\n*** [.pio\\build\\native\\test\\test_button_manager_native.o] Error 1\nBuilding stage has failed, see errors above. Use `pio test -vvv` option to enable verbose output.\n--------------------- native:* [ERRORED] Took 4.35 seconds ---------------------\n=================================== SUMMARY ===================================\nEnvironment    Test    Status    Duration\n-------------  ------  --------  ------------\nnative         *       ERRORED   00:00:04.354\n================== 1 test cases: 0 succeeded in 00:00:04.354 ==================\n"
    },
    {
      "name": "Native環境でのtest_time_syncテスト",
      "success": false,
      "duration": 4.583204984664917,
      "timestamp": "2025-07-14T07:34:57.453991",
      "output": "Verbosity level can be increased via `-v, -vv, or -vvv` option\nCollected 1 tests\n\nProcessing * in native environment\n--------------------------------------------------------------------------------\nBuilding...\n\n",
      "error_output": "In file included from test\\test_button_manager_native.cpp:3:\nlib/M5Stack.h:140:9: warning: 'TFT_ORANGE' redefined\n  140 | #define TFT_ORANGE    0xFDA0\n      |         ^~~~~~~~~~\nIn file included from src/button_manager.h:5,\n                 from test\\test_button_manager_native.cpp:2:\nsrc/../test/mocks/mock_m5stack.h:144:9: note: this is the location of the previous definition\n  144 | #define TFT_ORANGE 0xFD20\n      |         ^~~~~~~~~~\nIn file included from src/button_manager.h:6:\nsrc/debounce_manager.h:12:34: error: 'Button' has not been declared\n   12 |   static bool canProcessHardware(Button& button);\n      |                                  ^~~~~~\nsrc/button_manager.h:23:28: error: 'Button' has not been declared\n   23 |   static bool isShortPress(Button& button, unsigned long threshold = 1000);\n      |                            ^~~~~~\nsrc/button_manager.h:24:27: error: 'Button' has not been declared\n   24 |   static bool isLongPress(Button& button, unsigned long threshold = 1000);\n      |                           ^~~~~~\nsrc/button_manager.h:25:26: error: 'Button' has not been declared\n   25 |   static bool isReleased(Button& button);\n      |                          ^~~~~~\nsrc/button_manager.h:30:38: error: 'Button' has not been declared\n   30 |   static ButtonState* getButtonState(Button& button);\n      |                                      ^~~~~~\nsrc/button_manager.h:33:32: error: 'Button' has not been declared\n   33 |   static bool canProcessButton(Button& button);\n      |                                ^~~~~~\nsrc/button_manager.h:40:19: error: 'Button' was not declared in this scope\n   40 |   static std::map<Button*, ButtonState> buttonStates;\n      |                   ^~~~~~\nsrc/button_manager.h:40:39: error: template argument 1 is invalid\n   40 |   static std::map<Button*, ButtonState> buttonStates;\n      |                                       ^\nsrc/button_manager.h:40:39: error: template argument 3 is invalid\nsrc/button_manager.h:40:39: error: template argument 4 is invalid\nsrc/button_manager.h:44:33: error: 'Button' has not been declared\n   44 |   static void updateButtonState(Button& button, unsigned long currentTime);\n      |                                 ^~~~~~\nsrc/button_manager.h:46:46: error: 'Button' has not been declared\n   46 |   static ButtonState& getOrCreateButtonState(Button& button);\n      |                                              ^~~~~~\nIn file included from lib/M5Stack.h:7:\nlib/Arduino.h:97:20: error: conflicting declaration 'SerialClass Serial'\n   97 | extern SerialClass Serial;\n      |                    ^~~~~~\nsrc/../test/mocks/mock_m5stack.h:225:19: note: previous declaration as 'MockSerial Serial'\n  225 | extern MockSerial Serial;\n      |                   ^~~~~~\nlib/Arduino.h:164:20: error: conflicting declaration 'EEPROMClass EEPROM'\n  164 | extern EEPROMClass EEPROM;\n      |                    ^~~~~~\nsrc/../test/mocks/mock_m5stack.h:246:19: note: previous declaration as 'MockEEPROM EEPROM'\n  246 | extern MockEEPROM EEPROM;\n      |                   ^~~~~~\nlib/M5Stack.h:121:16: error: conflicting declaration 'M5Stack M5'\n  121 | extern M5Stack M5;\n      |                ^~\nsrc/../test/mocks/mock_m5stack.h:116:20: note: previous declaration as 'MockM5Stack M5'\n  116 | extern MockM5Stack M5;\n      |                    ^~\ntest\\test_button_manager_native.cpp: In function 'void test_button_manager_initialization()':\ntest\\test_button_manager_native.cpp:58:58: error: cannot convert 'MockM5Stack::Button' to 'int&'\n   58 |   ButtonState* stateA = ButtonManager::getButtonState(M5.BtnA);\n      |                                                       ~~~^~~~\n      |                                                          |\n      |                                                          MockM5Stack::Button\nsrc/button_manager.h:30:46: note: initializing argument 1 of 'static ButtonState* ButtonManager::getButtonState(int&)'\n   30 |   static ButtonState* getButtonState(Button& button);\n      |                                      ~~~~~~~~^~~~~~\ntest\\test_button_manager_native.cpp:59:58: error: cannot convert 'MockM5Stack::Button' to 'int&'\n   59 |   ButtonState* stateB = ButtonManager::getButtonState(M5.BtnB);\n      |                                                       ~~~^~~~\n      |                                                          |\n      |                                                          MockM5Stack::Button\nsrc/button_manager.h:30:46: note: initializing argument 1 of 'static ButtonState* ButtonManager::getButtonState(int&)'\n   30 |   static ButtonState* getButtonState(Button& button);\n      |                                      ~~~~~~~~^~~~~~\ntest\\test_button_manager_native.cpp:60:58: error: cannot convert 'MockM5Stack::Button' to 'int&'\n   60 |   ButtonState* stateC = ButtonManager::getButtonState(M5.BtnC);\n      |                                                       ~~~^~~~\n      |                                                          |\n      |                                                          MockM5Stack::Button\nsrc/button_manager.h:30:46: note: initializing argument 1 of 'static ButtonState* ButtonManager::getButtonState(int&)'\n   30 |   static ButtonState* getButtonState(Button& button);\n      |                                      ~~~~~~~~^~~~~~\ntest\\test_button_manager_native.cpp: In function 'void test_short_press_detection()':\ntest\\test_button_manager_native.cpp:80:49: error: cannot convert 'MockM5Stack::Button' to 'int&'\n   80 |   bool isShort = ButtonManager::isShortPress(M5.BtnA, 1000);\n      |                                              ~~~^~~~\n      |                                                 |\n      |                                                 MockM5Stack::Button\nsrc/button_manager.h:23:36: note: initializing argument 1 of 'static bool ButtonManager::isShortPress(int&, long unsigned int)'\n   23 |   static bool isShortPress(Button& button, unsigned long threshold = 1000);\n      |                            ~~~~~~~~^~~~~~\ntest\\test_button_manager_native.cpp: In function 'void test_long_press_detection()':\ntest\\test_button_manager_native.cpp:95:47: error: cannot convert 'MockM5Stack::Button' to 'int&'\n   95 |   bool isLong = ButtonManager::isLongPress(M5.BtnA, 1000);\n      |                                            ~~~^~~~\n      |                                               |\n      |                                               MockM5Stack::Button\nsrc/button_manager.h:24:35: note: initializing argument 1 of 'static bool ButtonManager::isLongPress(int&, long unsigned int)'\n   24 |   static bool isLongPress(Button& button, unsigned long threshold = 1000);\n      |                           ~~~~~~~~^~~~~~\ntest\\test_button_manager_native.cpp: In function 'void test_release_detection()':\ntest\\test_button_manager_native.cpp:111:50: error: cannot convert 'MockM5Stack::Button' to 'int&'\n  111 |   bool isReleased = ButtonManager::isReleased(M5.BtnA);\n      |                                               ~~~^~~~\n      |                                                  |\n      |                                                  MockM5Stack::Button\nsrc/button_manager.h:25:34: note: initializing argument 1 of 'static bool ButtonManager::isReleased(int&)'\n   25 |   static bool isReleased(Button& button);\n      |                          ~~~~~~~~^~~~~~\ntest\\test_button_manager_native.cpp: In function 'void test_debounce_processing()':\ntest\\test_button_manager_native.cpp:119:56: error: cannot convert 'MockM5Stack::Button' to 'int&'\n  119 |   bool canProcess = ButtonManager::canProcessButton(M5.BtnA);\n      |                                                     ~~~^~~~\n      |                                                        |\n      |                                                        MockM5Stack::Button\nsrc/button_manager.h:33:40: note: initializing argument 1 of 'static bool ButtonManager::canProcessButton(int&)'\n   33 |   static bool canProcessButton(Button& button);\n      |                                ~~~~~~~~^~~~~~\ntest\\test_button_manager_native.cpp: In function 'void test_state_management()':\ntest\\test_button_manager_native.cpp:128:57: error: cannot convert 'MockM5Stack::Button' to 'int&'\n  128 |   ButtonState* state = ButtonManager::getButtonState(M5.BtnA);\n      |                                                      ~~~^~~~\n      |                                                         |\n      |                                                         MockM5Stack::Button\nsrc/button_manager.h:30:46: note: initializing argument 1 of 'static ButtonState* ButtonManager::getButtonState(int&)'\n   30 |   static ButtonState* getButtonState(Button& button);\n      |                                      ~~~~~~~~^~~~~~\ntest\\test_button_manager_native.cpp: In function 'void test_multiple_button_management()':\ntest\\test_button_manager_native.cpp:143:58: error: cannot convert 'MockM5Stack::Button' to 'int&'\n  143 |   ButtonState* stateA = ButtonManager::getButtonState(M5.BtnA);\n      |                                                       ~~~^~~~\n      |                                                          |\n      |                                                          MockM5Stack::Button\nsrc/button_manager.h:30:46: note: initializing argument 1 of 'static ButtonState* ButtonManager::getButtonState(int&)'\n   30 |   static ButtonState* getButtonState(Button& button);\n      |                                      ~~~~~~~~^~~~~~\ntest\\test_button_manager_native.cpp:144:58: error: cannot convert 'MockM5Stack::Button' to 'int&'\n  144 |   ButtonState* stateB = ButtonManager::getButtonState(M5.BtnB);\n      |                                                       ~~~^~~~\n      |                                                          |\n      |                                                          MockM5Stack::Button\nsrc/button_manager.h:30:46: note: initializing argument 1 of 'static ButtonState* ButtonManager::getButtonState(int&)'\n   30 |   static ButtonState* getButtonState(Button& button);\n      |                                      ~~~~~~~~^~~~~~\ntest\\test_button_manager_native.cpp: In function 'void test_state_reset()':\ntest\\test_button_manager_native.cpp:160:57: error: cannot convert 'MockM5Stack::Button' to 'int&'\n  160 |   ButtonState* state = ButtonManager::getButtonState(M5.BtnA);\n      |                                                      ~~~^~~~\n      |                                                         |\n      |                                                         MockM5Stack::Button\nsrc/button_manager.h:30:46: note: initializing argument 1 of 'static ButtonState* ButtonManager::getButtonState(int&)'\n   30 |   static ButtonState* getButtonState(Button& button);\n      |                                      ~~~~~~~~^~~~~~\nIn file included from test\\../src/state_transition/button_event.h:4,\n                 from test\\test_integration.cpp:2:\nlib/Arduino.h: In static member function 'static int WiFiClass::status()':\nlib/Arduino.h:148:34: error: 'WL_CONNECTED' was not declared in this scope\n  148 |     static int status() { return WL_CONNECTED; }\n      |                                  ^~~~~~~~~~~~\nlib/Arduino.h:148:34: note: the macro 'WL_CONNECTED' had not yet been defined\nlib/Arduino.h:184:9: note: it was later defined here\n  184 | #define WL_CONNECTED 3\n      |         ^~~~~~~~~~~~\ntest\\test_integration.cpp: At global scope:\ntest\\test_integration.cpp:10:17: error: conflicting declaration of 'long unsigned int millis()' with 'C' linkage\n   10 |   unsigned long millis() { return 1000; }\n      |                 ^~~~~~\nlib/Arduino.h:37:15: note: previous declaration with 'C++' linkage\n   37 | unsigned long millis();\n      |               ^~~~~~\n*** [.pio\\build\\native\\test\\test_button_manager_native.o] Error 1\n*** [.pio\\build\\native\\test\\test_integration.o] Error 1\nIn file included from lib/EEPROM.h:6,\n                 from src/settings.h:4,\n                 from test\\test_settings_logic_pure.cpp:4:\nlib/Arduino.h: In static member function 'static int WiFiClass::status()':\nlib/Arduino.h:148:34: error: 'WL_CONNECTED' was not declared in this scope\n  148 |     static int status() { return WL_CONNECTED; }\n      |                                  ^~~~~~~~~~~~\nlib/Arduino.h:148:34: note: the macro 'WL_CONNECTED' had not yet been defined\nlib/Arduino.h:184:9: note: it was later defined here\n  184 | #define WL_CONNECTED 3\n      |         ^~~~~~~~~~~~\nlib/EEPROM.h: At global scope:\nlib/EEPROM.h:9:7: error: redefinition of 'class EEPROMClass'\n    9 | class EEPROMClass {\n      |       ^~~~~~~~~~~\nlib/Arduino.h:155:7: note: previous definition of 'class EEPROMClass'\n  155 | class EEPROMClass {\n      |       ^~~~~~~~~~~\nIn file included from test\\../src/state_transition/button_event.h:4,\n                 from test\\test_integration_improved.cpp:6:\nlib/Arduino.h: In static member function 'static int WiFiClass::status()':\nlib/Arduino.h:148:34: error: 'WL_CONNECTED' was not declared in this scope\n  148 |     static int status() { return WL_CONNECTED; }\n      |                                  ^~~~~~~~~~~~\nlib/Arduino.h:148:34: note: the macro 'WL_CONNECTED' had not yet been defined\nlib/Arduino.h:184:9: note: it was later defined here\n  184 | #define WL_CONNECTED 3\n      |         ^~~~~~~~~~~~\ntest\\test_integration_improved.cpp: At global scope:\ntest\\test_integration_improved.cpp:15:17: error: conflicting declaration of 'long unsigned int millis()' with 'C' linkage\n   15 |   unsigned long millis() { return 1000; }\n      |                 ^~~~~~\nlib/Arduino.h:37:15: note: previous declaration with 'C++' linkage\n   37 | unsigned long millis();\n      |               ^~~~~~\ntest\\test_integration_improved.cpp: In function 'void generate_test_report()':\ntest\\test_integration_improved.cpp:171:21: error: invalid operands of types 'const char [2]' and 'int' to binary 'operator*'\n  171 |   printf(\"\\n\" + \"=\" * 60 + \"\\n\");\n      |                 ~~~ ^ ~~\n      |                 |     |\n      |                 |     int\n      |                 const char [2]\ntest\\test_integration_improved.cpp:173:14: error: invalid operands of types 'const char [2]' and 'int' to binary 'operator*'\n  173 |   printf(\"=\" * 60 + \"\\n\");\n      |          ~~~ ^ ~~\n      |          |     |\n      |          |     int\n      |          const char [2]\ntest\\test_integration_improved.cpp:197:14: error: invalid operands of types 'const char [2]' and 'int' to binary 'operator*'\n  197 |   printf(\"=\" * 60 + \"\\n\");\n      |          ~~~ ^ ~~\n      |          |     |\n      |          |     int\n      |          const char [2]\n*** [.pio\\build\\native\\test\\test_settings_logic_pure.o] Error 1\n*** [.pio\\build\\native\\test\\test_integration_improved.o] Error 1\nBuilding stage has failed, see errors above. Use `pio test -vvv` option to enable verbose output.\n--------------------- native:* [ERRORED] Took 3.19 seconds ---------------------\n=================================== SUMMARY ===================================\nEnvironment    Test    Status    Duration\n-------------  ------  --------  ------------\nnative         *       ERRORED   00:00:03.189\n================== 1 test cases: 0 succeeded in 00:00:03.189 ==================\n"
    },
    {
      "name": "Native環境でのtest_settings_preferencesテスト",
      "success": false,
      "duration": 3.945793390274048,
      "timestamp": "2025-07-14T07:35:01.410790",
      "output": "Verbosity level can be increased via `-v, -vv, or -vvv` option\nCollected 1 tests\n\nProcessing * in native environment\n--------------------------------------------------------------------------------\nBuilding...\n\n",
      "error_output": "In file included from test\\test_button_manager_native.cpp:3:\nlib/M5Stack.h:140:9: warning: 'TFT_ORANGE' redefined\n  140 | #define TFT_ORANGE    0xFDA0\n      |         ^~~~~~~~~~\nIn file included from src/button_manager.h:5,\n                 from test\\test_button_manager_native.cpp:2:\nsrc/../test/mocks/mock_m5stack.h:144:9: note: this is the location of the previous definition\n  144 | #define TFT_ORANGE 0xFD20\n      |         ^~~~~~~~~~\nIn file included from src/button_manager.h:6:\nsrc/debounce_manager.h:12:34: error: 'Button' has not been declared\n   12 |   static bool canProcessHardware(Button& button);\n      |                                  ^~~~~~\nsrc/button_manager.h:23:28: error: 'Button' has not been declared\n   23 |   static bool isShortPress(Button& button, unsigned long threshold = 1000);\n      |                            ^~~~~~\nsrc/button_manager.h:24:27: error: 'Button' has not been declared\n   24 |   static bool isLongPress(Button& button, unsigned long threshold = 1000);\n      |                           ^~~~~~\nsrc/button_manager.h:25:26: error: 'Button' has not been declared\n   25 |   static bool isReleased(Button& button);\n      |                          ^~~~~~\nsrc/button_manager.h:30:38: error: 'Button' has not been declared\n   30 |   static ButtonState* getButtonState(Button& button);\n      |                                      ^~~~~~\nsrc/button_manager.h:33:32: error: 'Button' has not been declared\n   33 |   static bool canProcessButton(Button& button);\n      |                                ^~~~~~\nsrc/button_manager.h:40:19: error: 'Button' was not declared in this scope\n   40 |   static std::map<Button*, ButtonState> buttonStates;\n      |                   ^~~~~~\nsrc/button_manager.h:40:39: error: template argument 1 is invalid\n   40 |   static std::map<Button*, ButtonState> buttonStates;\n      |                                       ^\nsrc/button_manager.h:40:39: error: template argument 3 is invalid\nsrc/button_manager.h:40:39: error: template argument 4 is invalid\nsrc/button_manager.h:44:33: error: 'Button' has not been declared\n   44 |   static void updateButtonState(Button& button, unsigned long currentTime);\n      |                                 ^~~~~~\nsrc/button_manager.h:46:46: error: 'Button' has not been declared\n   46 |   static ButtonState& getOrCreateButtonState(Button& button);\n      |                                              ^~~~~~\nIn file included from lib/M5Stack.h:7:\nlib/Arduino.h:97:20: error: conflicting declaration 'SerialClass Serial'\n   97 | extern SerialClass Serial;\n      |                    ^~~~~~\nsrc/../test/mocks/mock_m5stack.h:225:19: note: previous declaration as 'MockSerial Serial'\n  225 | extern MockSerial Serial;\n      |                   ^~~~~~\nlib/Arduino.h:164:20: error: conflicting declaration 'EEPROMClass EEPROM'\n  164 | extern EEPROMClass EEPROM;\n      |                    ^~~~~~\nsrc/../test/mocks/mock_m5stack.h:246:19: note: previous declaration as 'MockEEPROM EEPROM'\n  246 | extern MockEEPROM EEPROM;\n      |                   ^~~~~~\nlib/M5Stack.h:121:16: error: conflicting declaration 'M5Stack M5'\n  121 | extern M5Stack M5;\n      |                ^~\nsrc/../test/mocks/mock_m5stack.h:116:20: note: previous declaration as 'MockM5Stack M5'\n  116 | extern MockM5Stack M5;\n      |                    ^~\ntest\\test_button_manager_native.cpp: In function 'void test_button_manager_initialization()':\ntest\\test_button_manager_native.cpp:58:58: error: cannot convert 'MockM5Stack::Button' to 'int&'\n   58 |   ButtonState* stateA = ButtonManager::getButtonState(M5.BtnA);\n      |                                                       ~~~^~~~\n      |                                                          |\n      |                                                          MockM5Stack::Button\nsrc/button_manager.h:30:46: note: initializing argument 1 of 'static ButtonState* ButtonManager::getButtonState(int&)'\n   30 |   static ButtonState* getButtonState(Button& button);\n      |                                      ~~~~~~~~^~~~~~\ntest\\test_button_manager_native.cpp:59:58: error: cannot convert 'MockM5Stack::Button' to 'int&'\n   59 |   ButtonState* stateB = ButtonManager::getButtonState(M5.BtnB);\n      |                                                       ~~~^~~~\n      |                                                          |\n      |                                                          MockM5Stack::Button\nsrc/button_manager.h:30:46: note: initializing argument 1 of 'static ButtonState* ButtonManager::getButtonState(int&)'\n   30 |   static ButtonState* getButtonState(Button& button);\n      |                                      ~~~~~~~~^~~~~~\ntest\\test_button_manager_native.cpp:60:58: error: cannot convert 'MockM5Stack::Button' to 'int&'\n   60 |   ButtonState* stateC = ButtonManager::getButtonState(M5.BtnC);\n      |                                                       ~~~^~~~\n      |                                                          |\n      |                                                          MockM5Stack::Button\nsrc/button_manager.h:30:46: note: initializing argument 1 of 'static ButtonState* ButtonManager::getButtonState(int&)'\n   30 |   static ButtonState* getButtonState(Button& button);\n      |                                      ~~~~~~~~^~~~~~\ntest\\test_button_manager_native.cpp: In function 'void test_short_press_detection()':\ntest\\test_button_manager_native.cpp:80:49: error: cannot convert 'MockM5Stack::Button' to 'int&'\n   80 |   bool isShort = ButtonManager::isShortPress(M5.BtnA, 1000);\n      |                                              ~~~^~~~\n      |                                                 |\n      |                                                 MockM5Stack::Button\nsrc/button_manager.h:23:36: note: initializing argument 1 of 'static bool ButtonManager::isShortPress(int&, long unsigned int)'\n   23 |   static bool isShortPress(Button& button, unsigned long threshold = 1000);\n      |                            ~~~~~~~~^~~~~~\ntest\\test_button_manager_native.cpp: In function 'void test_long_press_detection()':\ntest\\test_button_manager_native.cpp:95:47: error: cannot convert 'MockM5Stack::Button' to 'int&'\n   95 |   bool isLong = ButtonManager::isLongPress(M5.BtnA, 1000);\n      |                                            ~~~^~~~\n      |                                               |\n      |                                               MockM5Stack::Button\nsrc/button_manager.h:24:35: note: initializing argument 1 of 'static bool ButtonManager::isLongPress(int&, long unsigned int)'\n   24 |   static bool isLongPress(Button& button, unsigned long threshold = 1000);\n      |                           ~~~~~~~~^~~~~~\ntest\\test_button_manager_native.cpp: In function 'void test_release_detection()':\ntest\\test_button_manager_native.cpp:111:50: error: cannot convert 'MockM5Stack::Button' to 'int&'\n  111 |   bool isReleased = ButtonManager::isReleased(M5.BtnA);\n      |                                               ~~~^~~~\n      |                                                  |\n      |                                                  MockM5Stack::Button\nsrc/button_manager.h:25:34: note: initializing argument 1 of 'static bool ButtonManager::isReleased(int&)'\n   25 |   static bool isReleased(Button& button);\n      |                          ~~~~~~~~^~~~~~\ntest\\test_button_manager_native.cpp: In function 'void test_debounce_processing()':\ntest\\test_button_manager_native.cpp:119:56: error: cannot convert 'MockM5Stack::Button' to 'int&'\n  119 |   bool canProcess = ButtonManager::canProcessButton(M5.BtnA);\n      |                                                     ~~~^~~~\n      |                                                        |\n      |                                                        MockM5Stack::Button\nsrc/button_manager.h:33:40: note: initializing argument 1 of 'static bool ButtonManager::canProcessButton(int&)'\n   33 |   static bool canProcessButton(Button& button);\n      |                                ~~~~~~~~^~~~~~\ntest\\test_button_manager_native.cpp: In function 'void test_state_management()':\ntest\\test_button_manager_native.cpp:128:57: error: cannot convert 'MockM5Stack::Button' to 'int&'\n  128 |   ButtonState* state = ButtonManager::getButtonState(M5.BtnA);\n      |                                                      ~~~^~~~\n      |                                                         |\n      |                                                         MockM5Stack::Button\nsrc/button_manager.h:30:46: note: initializing argument 1 of 'static ButtonState* ButtonManager::getButtonState(int&)'\n   30 |   static ButtonState* getButtonState(Button& button);\n      |                                      ~~~~~~~~^~~~~~\ntest\\test_button_manager_native.cpp: In function 'void test_multiple_button_management()':\ntest\\test_button_manager_native.cpp:143:58: error: cannot convert 'MockM5Stack::Button' to 'int&'\n  143 |   ButtonState* stateA = ButtonManager::getButtonState(M5.BtnA);\n      |                                                       ~~~^~~~\n      |                                                          |\n      |                                                          MockM5Stack::Button\nsrc/button_manager.h:30:46: note: initializing argument 1 of 'static ButtonState* ButtonManager::getButtonState(int&)'\n   30 |   static ButtonState* getButtonState(Button& button);\n      |                                      ~~~~~~~~^~~~~~\ntest\\test_button_manager_native.cpp:144:58: error: cannot convert 'MockM5Stack::Button' to 'int&'\n  144 |   ButtonState* stateB = ButtonManager::getButtonState(M5.BtnB);\n      |                                                       ~~~^~~~\n      |                                                          |\n      |                                                          MockM5Stack::Button\nsrc/button_manager.h:30:46: note: initializing argument 1 of 'static ButtonState* ButtonManager::getButtonState(int&)'\n   30 |   static ButtonState* getButtonState(Button& button);\n      |                                      ~~~~~~~~^~~~~~\ntest\\test_button_manager_native.cpp: In function 'void test_state_reset()':\ntest\\test_button_manager_native.cpp:160:57: error: cannot convert 'MockM5Stack::Button' to 'int&'\n  160 |   ButtonState* state = ButtonManager::getButtonState(M5.BtnA);\n      |                                                      ~~~^~~~\n      |                                                         |\n      |                                                         MockM5Stack::Button\nsrc/button_manager.h:30:46: note: initializing argument 1 of 'static ButtonState* ButtonManager::getButtonState(int&)'\n   30 |   static ButtonState* getButtonState(Button& button);\n      |                                      ~~~~~~~~^~~~~~\nIn file included from test\\../src/state_transition/button_event.h:4,\n                 from test\\test_integration.cpp:2:\nlib/Arduino.h: In static member function 'static int WiFiClass::status()':\nlib/Arduino.h:148:34: error: 'WL_CONNECTED' was not declared in this scope\n  148 |     static int status() { return WL_CONNECTED; }\n      |                                  ^~~~~~~~~~~~\nlib/Arduino.h:148:34: note: the macro 'WL_CONNECTED' had not yet been defined\nlib/Arduino.h:184:9: note: it was later defined here\n  184 | #define WL_CONNECTED 3\n      |         ^~~~~~~~~~~~\ntest\\test_integration.cpp: At global scope:\ntest\\test_integration.cpp:10:17: error: conflicting declaration of 'long unsigned int millis()' with 'C' linkage\n   10 |   unsigned long millis() { return 1000; }\n      |                 ^~~~~~\nlib/Arduino.h:37:15: note: previous declaration with 'C++' linkage\n   37 | unsigned long millis();\n      |               ^~~~~~\n*** [.pio\\build\\native\\test\\test_button_manager_native.o] Error 1\n*** [.pio\\build\\native\\test\\test_integration.o] Error 1\nIn file included from test\\../src/state_transition/button_event.h:4,\n                 from test\\test_integration_improved.cpp:6:\nlib/Arduino.h: In static member function 'static int WiFiClass::status()':\nlib/Arduino.h:148:34: error: 'WL_CONNECTED' was not declared in this scope\n  148 |     static int status() { return WL_CONNECTED; }\n      |                                  ^~~~~~~~~~~~\nlib/Arduino.h:148:34: note: the macro 'WL_CONNECTED' had not yet been defined\nlib/Arduino.h:184:9: note: it was later defined here\n  184 | #define WL_CONNECTED 3\n      |         ^~~~~~~~~~~~\ntest\\test_integration_improved.cpp: At global scope:\ntest\\test_integration_improved.cpp:15:17: error: conflicting declaration of 'long unsigned int millis()' with 'C' linkage\n   15 |   unsigned long millis() { return 1000; }\n      |                 ^~~~~~\nlib/Arduino.h:37:15: note: previous declaration with 'C++' linkage\n   37 | unsigned long millis();\n      |               ^~~~~~\ntest\\test_integration_improved.cpp: In function 'void generate_test_report()':\ntest\\test_integration_improved.cpp:171:21: error: invalid operands of types 'const char [2]' and 'int' to binary 'operator*'\n  171 |   printf(\"\\n\" + \"=\" * 60 + \"\\n\");\n      |                 ~~~ ^ ~~\n      |                 |     |\n      |                 |     int\n      |                 const char [2]\ntest\\test_integration_improved.cpp:173:14: error: invalid operands of types 'const char [2]' and 'int' to binary 'operator*'\n  173 |   printf(\"=\" * 60 + \"\\n\");\n      |          ~~~ ^ ~~\n      |          |     |\n      |          |     int\n      |          const char [2]\ntest\\test_integration_improved.cpp:197:14: error: invalid operands of types 'const char [2]' and 'int' to binary 'operator*'\n  197 |   printf(\"=\" * 60 + \"\\n\");\n      |          ~~~ ^ ~~\n      |          |     |\n      |          |     int\n      |          const char [2]\nIn file included from lib/EEPROM.h:6,\n                 from src/settings.h:4,\n                 from test\\test_settings_logic_pure.cpp:4:\nlib/Arduino.h: In static member function 'static int WiFiClass::status()':\nlib/Arduino.h:148:34: error: 'WL_CONNECTED' was not declared in this scope\n  148 |     static int status() { return WL_CONNECTED; }\n      |                                  ^~~~~~~~~~~~\nlib/Arduino.h:148:34: note: the macro 'WL_CONNECTED' had not yet been defined\nlib/Arduino.h:184:9: note: it was later defined here\n  184 | #define WL_CONNECTED 3\n      |         ^~~~~~~~~~~~\nlib/EEPROM.h: At global scope:\nlib/EEPROM.h:9:7: error: redefinition of 'class EEPROMClass'\n    9 | class EEPROMClass {\n      |       ^~~~~~~~~~~\nlib/Arduino.h:155:7: note: previous definition of 'class EEPROMClass'\n  155 | class EEPROMClass {\n      |       ^~~~~~~~~~~\n*** [.pio\\build\\native\\test\\test_integration_improved.o] Error 1\n*** [.pio\\build\\native\\test\\test_settings_logic_pure.o] Error 1\nBuilding stage has failed, see errors above. Use `pio test -vvv` option to enable verbose output.\n--------------------- native:* [ERRORED] Took 2.79 seconds ---------------------\n=================================== SUMMARY ===================================\nEnvironment    Test    Status    Duration\n-------------  ------  --------  ------------\nnative         *       ERRORED   00:00:02.787\n================== 1 test cases: 0 succeeded in 00:00:02.787 ==================\n"
    },
    {
      "name": "Native環境でのtest_timer_basicテスト",
      "success": false,
      "duration": 3.888338565826416,
      "timestamp": "2025-07-14T07:35:05.323548",
      "output": "Verbosity level can be increased via `-v, -vv, or -vvv` option\nCollected 1 tests\n\nProcessing * in native environment\n--------------------------------------------------------------------------------\nBuilding...\n\n",
      "error_output": "In file included from test\\test_button_manager_native.cpp:3:\nlib/M5Stack.h:140:9: warning: 'TFT_ORANGE' redefined\n  140 | #define TFT_ORANGE    0xFDA0\n      |         ^~~~~~~~~~\nIn file included from src/button_manager.h:5,\n                 from test\\test_button_manager_native.cpp:2:\nsrc/../test/mocks/mock_m5stack.h:144:9: note: this is the location of the previous definition\n  144 | #define TFT_ORANGE 0xFD20\n      |         ^~~~~~~~~~\nIn file included from src/button_manager.h:6:\nsrc/debounce_manager.h:12:34: error: 'Button' has not been declared\n   12 |   static bool canProcessHardware(Button& button);\n      |                                  ^~~~~~\nsrc/button_manager.h:23:28: error: 'Button' has not been declared\n   23 |   static bool isShortPress(Button& button, unsigned long threshold = 1000);\n      |                            ^~~~~~\nsrc/button_manager.h:24:27: error: 'Button' has not been declared\n   24 |   static bool isLongPress(Button& button, unsigned long threshold = 1000);\n      |                           ^~~~~~\nsrc/button_manager.h:25:26: error: 'Button' has not been declared\n   25 |   static bool isReleased(Button& button);\n      |                          ^~~~~~\nsrc/button_manager.h:30:38: error: 'Button' has not been declared\n   30 |   static ButtonState* getButtonState(Button& button);\n      |                                      ^~~~~~\nsrc/button_manager.h:33:32: error: 'Button' has not been declared\n   33 |   static bool canProcessButton(Button& button);\n      |                                ^~~~~~\nsrc/button_manager.h:40:19: error: 'Button' was not declared in this scope\n   40 |   static std::map<Button*, ButtonState> buttonStates;\n      |                   ^~~~~~\nsrc/button_manager.h:40:39: error: template argument 1 is invalid\n   40 |   static std::map<Button*, ButtonState> buttonStates;\n      |                                       ^\nsrc/button_manager.h:40:39: error: template argument 3 is invalid\nsrc/button_manager.h:40:39: error: template argument 4 is invalid\nsrc/button_manager.h:44:33: error: 'Button' has not been declared\n   44 |   static void updateButtonState(Button& button, unsigned long currentTime);\n      |                                 ^~~~~~\nsrc/button_manager.h:46:46: error: 'Button' has not been declared\n   46 |   static ButtonState& getOrCreateButtonState(Button& button);\n      |                                              ^~~~~~\nIn file included from lib/M5Stack.h:7:\nlib/Arduino.h:97:20: error: conflicting declaration 'SerialClass Serial'\n   97 | extern SerialClass Serial;\n      |                    ^~~~~~\nsrc/../test/mocks/mock_m5stack.h:225:19: note: previous declaration as 'MockSerial Serial'\n  225 | extern MockSerial Serial;\n      |                   ^~~~~~\nlib/Arduino.h:164:20: error: conflicting declaration 'EEPROMClass EEPROM'\n  164 | extern EEPROMClass EEPROM;\n      |                    ^~~~~~\nsrc/../test/mocks/mock_m5stack.h:246:19: note: previous declaration as 'MockEEPROM EEPROM'\n  246 | extern MockEEPROM EEPROM;\n      |                   ^~~~~~\nlib/M5Stack.h:121:16: error: conflicting declaration 'M5Stack M5'\n  121 | extern M5Stack M5;\n      |                ^~\nsrc/../test/mocks/mock_m5stack.h:116:20: note: previous declaration as 'MockM5Stack M5'\n  116 | extern MockM5Stack M5;\n      |                    ^~\ntest\\test_button_manager_native.cpp: In function 'void test_button_manager_initialization()':\ntest\\test_button_manager_native.cpp:58:58: error: cannot convert 'MockM5Stack::Button' to 'int&'\n   58 |   ButtonState* stateA = ButtonManager::getButtonState(M5.BtnA);\n      |                                                       ~~~^~~~\n      |                                                          |\n      |                                                          MockM5Stack::Button\nsrc/button_manager.h:30:46: note: initializing argument 1 of 'static ButtonState* ButtonManager::getButtonState(int&)'\n   30 |   static ButtonState* getButtonState(Button& button);\n      |                                      ~~~~~~~~^~~~~~\ntest\\test_button_manager_native.cpp:59:58: error: cannot convert 'MockM5Stack::Button' to 'int&'\n   59 |   ButtonState* stateB = ButtonManager::getButtonState(M5.BtnB);\n      |                                                       ~~~^~~~\n      |                                                          |\n      |                                                          MockM5Stack::Button\nsrc/button_manager.h:30:46: note: initializing argument 1 of 'static ButtonState* ButtonManager::getButtonState(int&)'\n   30 |   static ButtonState* getButtonState(Button& button);\n      |                                      ~~~~~~~~^~~~~~\ntest\\test_button_manager_native.cpp:60:58: error: cannot convert 'MockM5Stack::Button' to 'int&'\n   60 |   ButtonState* stateC = ButtonManager::getButtonState(M5.BtnC);\n      |                                                       ~~~^~~~\n      |                                                          |\n      |                                                          MockM5Stack::Button\nsrc/button_manager.h:30:46: note: initializing argument 1 of 'static ButtonState* ButtonManager::getButtonState(int&)'\n   30 |   static ButtonState* getButtonState(Button& button);\n      |                                      ~~~~~~~~^~~~~~\ntest\\test_button_manager_native.cpp: In function 'void test_short_press_detection()':\ntest\\test_button_manager_native.cpp:80:49: error: cannot convert 'MockM5Stack::Button' to 'int&'\n   80 |   bool isShort = ButtonManager::isShortPress(M5.BtnA, 1000);\n      |                                              ~~~^~~~\n      |                                                 |\n      |                                                 MockM5Stack::Button\nsrc/button_manager.h:23:36: note: initializing argument 1 of 'static bool ButtonManager::isShortPress(int&, long unsigned int)'\n   23 |   static bool isShortPress(Button& button, unsigned long threshold = 1000);\n      |                            ~~~~~~~~^~~~~~\ntest\\test_button_manager_native.cpp: In function 'void test_long_press_detection()':\ntest\\test_button_manager_native.cpp:95:47: error: cannot convert 'MockM5Stack::Button' to 'int&'\n   95 |   bool isLong = ButtonManager::isLongPress(M5.BtnA, 1000);\n      |                                            ~~~^~~~\n      |                                               |\n      |                                               MockM5Stack::Button\nsrc/button_manager.h:24:35: note: initializing argument 1 of 'static bool ButtonManager::isLongPress(int&, long unsigned int)'\n   24 |   static bool isLongPress(Button& button, unsigned long threshold = 1000);\n      |                           ~~~~~~~~^~~~~~\ntest\\test_button_manager_native.cpp: In function 'void test_release_detection()':\ntest\\test_button_manager_native.cpp:111:50: error: cannot convert 'MockM5Stack::Button' to 'int&'\n  111 |   bool isReleased = ButtonManager::isReleased(M5.BtnA);\n      |                                               ~~~^~~~\n      |                                                  |\n      |                                                  MockM5Stack::Button\nsrc/button_manager.h:25:34: note: initializing argument 1 of 'static bool ButtonManager::isReleased(int&)'\n   25 |   static bool isReleased(Button& button);\n      |                          ~~~~~~~~^~~~~~\ntest\\test_button_manager_native.cpp: In function 'void test_debounce_processing()':\ntest\\test_button_manager_native.cpp:119:56: error: cannot convert 'MockM5Stack::Button' to 'int&'\n  119 |   bool canProcess = ButtonManager::canProcessButton(M5.BtnA);\n      |                                                     ~~~^~~~\n      |                                                        |\n      |                                                        MockM5Stack::Button\nsrc/button_manager.h:33:40: note: initializing argument 1 of 'static bool ButtonManager::canProcessButton(int&)'\n   33 |   static bool canProcessButton(Button& button);\n      |                                ~~~~~~~~^~~~~~\ntest\\test_button_manager_native.cpp: In function 'void test_state_management()':\ntest\\test_button_manager_native.cpp:128:57: error: cannot convert 'MockM5Stack::Button' to 'int&'\n  128 |   ButtonState* state = ButtonManager::getButtonState(M5.BtnA);\n      |                                                      ~~~^~~~\n      |                                                         |\n      |                                                         MockM5Stack::Button\nsrc/button_manager.h:30:46: note: initializing argument 1 of 'static ButtonState* ButtonManager::getButtonState(int&)'\n   30 |   static ButtonState* getButtonState(Button& button);\n      |                                      ~~~~~~~~^~~~~~\ntest\\test_button_manager_native.cpp: In function 'void test_multiple_button_management()':\ntest\\test_button_manager_native.cpp:143:58: error: cannot convert 'MockM5Stack::Button' to 'int&'\n  143 |   ButtonState* stateA = ButtonManager::getButtonState(M5.BtnA);\n      |                                                       ~~~^~~~\n      |                                                          |\n      |                                                          MockM5Stack::Button\nsrc/button_manager.h:30:46: note: initializing argument 1 of 'static ButtonState* ButtonManager::getButtonState(int&)'\n   30 |   static ButtonState* getButtonState(Button& button);\n      |                                      ~~~~~~~~^~~~~~\ntest\\test_button_manager_native.cpp:144:58: error: cannot convert 'MockM5Stack::Button' to 'int&'\n  144 |   ButtonState* stateB = ButtonManager::getButtonState(M5.BtnB);\n      |                                                       ~~~^~~~\n      |                                                          |\n      |                                                          MockM5Stack::Button\nsrc/button_manager.h:30:46: note: initializing argument 1 of 'static ButtonState* ButtonManager::getButtonState(int&)'\n   30 |   static ButtonState* getButtonState(Button& button);\n      |                                      ~~~~~~~~^~~~~~\ntest\\test_button_manager_native.cpp: In function 'void test_state_reset()':\ntest\\test_button_manager_native.cpp:160:57: error: cannot convert 'MockM5Stack::Button' to 'int&'\n  160 |   ButtonState* state = ButtonManager::getButtonState(M5.BtnA);\n      |                                                      ~~~^~~~\n      |                                                         |\n      |                                                         MockM5Stack::Button\nsrc/button_manager.h:30:46: note: initializing argument 1 of 'static ButtonState* ButtonManager::getButtonState(int&)'\n   30 |   static ButtonState* getButtonState(Button& button);\n      |                                      ~~~~~~~~^~~~~~\nIn file included from test\\../src/state_transition/button_event.h:4,\n                 from test\\test_integration.cpp:2:\nlib/Arduino.h: In static member function 'static int WiFiClass::status()':\nlib/Arduino.h:148:34: error: 'WL_CONNECTED' was not declared in this scope\n  148 |     static int status() { return WL_CONNECTED; }\n      |                                  ^~~~~~~~~~~~\nlib/Arduino.h:148:34: note: the macro 'WL_CONNECTED' had not yet been defined\nlib/Arduino.h:184:9: note: it was later defined here\n  184 | #define WL_CONNECTED 3\n      |         ^~~~~~~~~~~~\ntest\\test_integration.cpp: At global scope:\ntest\\test_integration.cpp:10:17: error: conflicting declaration of 'long unsigned int millis()' with 'C' linkage\n   10 |   unsigned long millis() { return 1000; }\n      |                 ^~~~~~\nlib/Arduino.h:37:15: note: previous declaration with 'C++' linkage\n   37 | unsigned long millis();\n      |               ^~~~~~\n*** [.pio\\build\\native\\test\\test_button_manager_native.o] Error 1\n*** [.pio\\build\\native\\test\\test_integration.o] Error 1\nIn file included from test\\../src/state_transition/button_event.h:4,\n                 from test\\test_integration_improved.cpp:6:\nlib/Arduino.h: In static member function 'static int WiFiClass::status()':\nlib/Arduino.h:148:34: error: 'WL_CONNECTED' was not declared in this scope\n  148 |     static int status() { return WL_CONNECTED; }\n      |                                  ^~~~~~~~~~~~\nlib/Arduino.h:148:34: note: the macro 'WL_CONNECTED' had not yet been defined\nlib/Arduino.h:184:9: note: it was later defined here\n  184 | #define WL_CONNECTED 3\n      |         ^~~~~~~~~~~~\ntest\\test_integration_improved.cpp: At global scope:\ntest\\test_integration_improved.cpp:15:17: error: conflicting declaration of 'long unsigned int millis()' with 'C' linkage\n   15 |   unsigned long millis() { return 1000; }\n      |                 ^~~~~~\nlib/Arduino.h:37:15: note: previous declaration with 'C++' linkage\n   37 | unsigned long millis();\n      |               ^~~~~~\ntest\\test_integration_improved.cpp: In function 'void generate_test_report()':\ntest\\test_integration_improved.cpp:171:21: error: invalid operands of types 'const char [2]' and 'int' to binary 'operator*'\n  171 |   printf(\"\\n\" + \"=\" * 60 + \"\\n\");\n      |                 ~~~ ^ ~~\n      |                 |     |\n      |                 |     int\n      |                 const char [2]\ntest\\test_integration_improved.cpp:173:14: error: invalid operands of types 'const char [2]' and 'int' to binary 'operator*'\n  173 |   printf(\"=\" * 60 + \"\\n\");\n      |          ~~~ ^ ~~\n      |          |     |\n      |          |     int\n      |          const char [2]\ntest\\test_integration_improved.cpp:197:14: error: invalid operands of types 'const char [2]' and 'int' to binary 'operator*'\n  197 |   printf(\"=\" * 60 + \"\\n\");\n      |          ~~~ ^ ~~\n      |          |     |\n      |          |     int\n      |          const char [2]\nIn file included from lib/EEPROM.h:6,\n                 from src/settings.h:4,\n                 from test\\test_settings_logic_pure.cpp:4:\nlib/Arduino.h: In static member function 'static int WiFiClass::status()':\nlib/Arduino.h:148:34: error: 'WL_CONNECTED' was not declared in this scope\n  148 |     static int status() { return WL_CONNECTED; }\n      |                                  ^~~~~~~~~~~~\nlib/Arduino.h:148:34: note: the macro 'WL_CONNECTED' had not yet been defined\nlib/Arduino.h:184:9: note: it was later defined here\n  184 | #define WL_CONNECTED 3\n      |         ^~~~~~~~~~~~\nlib/EEPROM.h: At global scope:\nlib/EEPROM.h:9:7: error: redefinition of 'class EEPROMClass'\n    9 | class EEPROMClass {\n      |       ^~~~~~~~~~~\nlib/Arduino.h:155:7: note: previous definition of 'class EEPROMClass'\n  155 | class EEPROMClass {\n      |       ^~~~~~~~~~~\n*** [.pio\\build\\native\\test\\test_settings_logic_pure.o] Error 1\n*** [.pio\\build\\native\\test\\test_integration_improved.o] Error 1\nBuilding stage has failed, see errors above. Use `pio test -vvv` option to enable verbose output.\n--------------------- native:* [ERRORED] Took 2.72 seconds ---------------------\n=================================== SUMMARY ===================================\nEnvironment    Test    Status    Duration\n-------------  ------  --------  ------------\nnative         *       ERRORED   00:00:02.724\n================== 1 test cases: 0 succeeded in 00:00:02.724 ==================\n"
    }
  ]
}