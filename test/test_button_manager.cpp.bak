#include <unity.h>
#include "button_manager.h"
#include <M5Stack.h>

// テスト用のヘルパー関数
void setUp(void) {
  // テスト前の初期化
  ButtonManager::initialize();
}

void tearDown(void) {
  // テスト後のクリーンアップ
  ButtonManager::resetButtonStates();
}

// 基本的な初期化テスト
void test_button_manager_initialization() {
  // 初期化後の状態確認
  ButtonState* stateA = ButtonManager::getButtonState(M5.BtnA);
  ButtonState* stateB = ButtonManager::getButtonState(M5.BtnB);
  ButtonState* stateC = ButtonManager::getButtonState(M5.BtnC);
  
  TEST_ASSERT_NOT_NULL(stateA);
  TEST_ASSERT_NOT_NULL(stateB);
  TEST_ASSERT_NOT_NULL(stateC);
  
  // 初期状態の確認
  TEST_ASSERT_FALSE(stateA->isPressed);
  TEST_ASSERT_FALSE(stateA->wasPressed);
  TEST_ASSERT_FALSE(stateA->wasReleased);
  TEST_ASSERT_EQUAL(0, stateA->pressCount);
  TEST_ASSERT_FALSE(stateA->longPressHandled);
}

// 状態更新テスト
void test_button_state_update() {
  // 状態更新の実行
  ButtonManager::updateButtonStates();
  
  // 更新後の状態確認
  ButtonState* stateA = ButtonManager::getButtonState(M5.BtnA);
  TEST_ASSERT_NOT_NULL(stateA);
  
  // 現在のボタン状態を反映していることを確認
  bool expectedPressed = M5.BtnA.isPressed();
  TEST_ASSERT_EQUAL(expectedPressed, stateA->isPressed);
}

// 短押し判定テスト（基本構造）
void test_short_press_detection_structure() {
  // 短押し判定の基本構造テスト
  // 実際のボタン押下はシミュレートできないため、構造のみテスト
  
  bool result = ButtonManager::isShortPress(M5.BtnA, 1000);
  // 初期状態では短押しではない
  TEST_ASSERT_FALSE(result);
}

// 長押し判定テスト（基本構造）
void test_long_press_detection_structure() {
  // 長押し判定の基本構造テスト
  // 実際のボタン押下はシミュレートできないため、構造のみテスト
  
  bool result = ButtonManager::isLongPress(M5.BtnA, 1000);
  // 初期状態では長押しではない
  TEST_ASSERT_FALSE(result);
}

// リリース判定テスト（基本構造）
void test_release_detection_structure() {
  // リリース判定の基本構造テスト
  // 実際のボタン押下はシミュレートできないため、構造のみテスト
  
  bool result = ButtonManager::isReleased(M5.BtnA);
  // 初期状態ではリリースされていない
  TEST_ASSERT_FALSE(result);
}

// デバウンス処理テスト
void test_debounce_integration() {
  // DebounceManagerとの連携テスト
  bool result = ButtonManager::canProcessButton(M5.BtnA);
  // 基本的な構造テスト（実際の動作はDebounceManagerに依存）
  // 戻り値の型チェックのみ
  TEST_ASSERT_TRUE(result == true || result == false);
}

// 状態リセットテスト
void test_state_reset() {
  // 初期状態を設定
  ButtonManager::initialize();
  
  // 状態更新を実行
  ButtonManager::updateButtonStates();
  
  // リセットを実行
  ButtonManager::resetButtonStates();
  
  // リセット後の状態確認
  ButtonState* stateA = ButtonManager::getButtonState(M5.BtnA);
  // リセット後は状態がクリアされる
  TEST_ASSERT_NULL(stateA);
}

// 全ボタンの状態管理テスト
void test_all_buttons_management() {
  // 全ボタンの状態管理テスト
  ButtonManager::updateButtonStates();
  
  // 各ボタンの状態確認
  ButtonState* stateA = ButtonManager::getButtonState(M5.BtnA);
  ButtonState* stateB = ButtonManager::getButtonState(M5.BtnB);
  ButtonState* stateC = ButtonManager::getButtonState(M5.BtnC);
  
  TEST_ASSERT_NOT_NULL(stateA);
  TEST_ASSERT_NOT_NULL(stateB);
  TEST_ASSERT_NOT_NULL(stateC);
  
  // 各ボタンの現在状態を確認
  TEST_ASSERT_EQUAL(M5.BtnA.isPressed(), stateA->isPressed);
  TEST_ASSERT_EQUAL(M5.BtnB.isPressed(), stateB->isPressed);
  TEST_ASSERT_EQUAL(M5.BtnC.isPressed(), stateC->isPressed);
}

// メイン関数
void RUN_UNITY_TESTS() {
  UNITY_BEGIN();
  
  // 基本機能テスト
  RUN_TEST(test_button_manager_initialization);
  RUN_TEST(test_button_state_update);
  RUN_TEST(test_short_press_detection_structure);
  RUN_TEST(test_long_press_detection_structure);
  RUN_TEST(test_release_detection_structure);
  RUN_TEST(test_debounce_integration);
  RUN_TEST(test_state_reset);
  RUN_TEST(test_all_buttons_management);
  
  UNITY_END();
}

// Arduino環境でのテスト実行
void setup() {
  M5.begin();
  Serial.begin(115200);
  
  // テスト実行
  RUN_UNITY_TESTS();
}

void loop() {
  // テスト完了後は何もしない
  delay(1000);
} 