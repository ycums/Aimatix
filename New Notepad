# M5Stack.hとM5Unified対応の完全修正計画（全体像）

## 0. Git Worktreeによる作業環境分離 ✅ 完了

```bash
# 現在のブランチを確認
git branch

# 新しい作業ブランチを作成
git checkout -b feature/m5unified-migration

# または、既存ブランチがある場合
git checkout feature/m5unified-migration

# 作業開始前のコミット
git add .
git commit -m "feat: M5Unified対応前のベースライン"

# 作業環境の確認
pwd
git status
```

## 1. platformio.iniの修正（環境継承を使用）

```ini
[platformio]
default_envs = m5stack-fire
build_dir = .pio/build

; 共通設定をbase環境として定義
[env:m5stack-base]
platform = espressif32
framework = arduino
lib_deps =
    m5stack/M5Unified @ ^0.2.7
    m5stack/M5GFX @ ^0.1.16
monitor_speed = 115200
upload_speed = 1500000  ; Fire v2.7も同じチップのため統一
build_type = release

; Fire環境（baseを継承）
[env:m5stack-fire]
extends = env:m5stack-base
board = m5stack-fire
build_flags = 
    -DCORE_DEBUG_LEVEL=0
    -DILI9341_ENABLE_DOUBLE_BUFFER
    -DM5STACK_FIRE

; Core2環境（baseを継承）
[env:m5stack-core2]
extends = env:m5stack-base
board = m5stack-core2
platform = espressif32@6.7.0
build_flags =
    -DBOARD_HAS_PSRAM
    -mfix-esp32-psram-cache-issue
    -DCORE_DEBUG_LEVEL=5
    -DM5STACK_CORE2

; Native環境（純粋ロジックテスト用）
[env:native]
platform = native
build_flags = 
    -DUNITY_INCLUDE_DOUBLE
    -DUNITY_DOUBLE_PRECISION=1e-12
    -DTEST_MODE
    -std=c++11
lib_deps =
    throwtheswitch/Unity @ ^2.5.2
build_unflags = -std=gnu++11 
check_tool = clangtidy
check_flags = 
    clangtidy: lib/libaimatix/src/*
    clangtidy: --config-file=.clang-tidy
```

## 2. src/main.cppの修正

```cpp
#include "DisplayCommon.h"
#include "StateManager.h"
#include "MainDisplayState.h"
#include "InputDisplayState.h"
#include "AlarmDisplayState.h"
#include "SettingsDisplayState.h"
#include "DateTimeInputState.h"
#include "InputLogic.h"
#include "SettingsLogic.h"
#include "InputDisplayViewImpl.h"
#include "MainDisplayViewImpl.h"
#include "AlarmDisplayViewImpl.h"
#include "SettingsDisplayViewImpl.h"
#include "DateTimeInputViewImpl.h"
#include "TimeLogic.h"
#include "AlarmLogic.h"
#include "DisplayAdapter.h"
#include "TimeValidationLogic.h"
#include "ButtonManager.h"

// 共通include（全環境で使用）
#include <Arduino.h>
#include <vector>
#include <ctime>
#include "DateTimeAdapter.h"

// 統一されたM5Unified include
#include <M5Unified.h>
#include <M5GFX.h>

// 定数定義
constexpr int LOOP_DELAY_MS = 50;

extern void setFillRectImpl(void (*impl)(int, int, int, int, int));
extern void setFillProgressBarSpriteImpl(void (*impl)(int, int, int, int, int));

// 統一された描画関数（全デバイス共通）
auto m5_rect_impl(int pos_x, int pos_y, int width, int height) -> void {
    M5.Display.drawRect(pos_x, pos_y, width, height, AMBER_COLOR);
}

auto m5_string_impl(const char* str, int pos_x, int pos_y) -> void {
    M5.Display.drawString(str, pos_x, pos_y);
}

auto m5_progress_bar_impl(int pos_x, int pos_y, int width, int height, int percent) -> void {
    constexpr int BORDER_WIDTH = 1;
    constexpr int PERCENT_DENOMINATOR = 100;
    
    M5Canvas canvas(&M5.Display);
    canvas.createSprite(width, height);
    canvas.fillSprite(TFT_BLACK);
    canvas.drawRect(0, 0, width, height, AMBER_COLOR);
    
    const int fillW = (width - 2 * BORDER_WIDTH) * percent / PERCENT_DENOMINATOR;
    if (fillW > 0) {
        canvas.fillRect(BORDER_WIDTH, BORDER_WIDTH, fillW, height - 2 * BORDER_WIDTH, AMBER_COLOR);
    }
    
    canvas.pushSprite(pos_x, pos_y);
    canvas.deleteSprite();
}

auto m5_set_font_impl(int font_size) -> void {
    M5.Display.setTextFont(font_size);
    M5.Display.setTextColor(AMBER_COLOR, TFT_BLACK);
}

auto m5_set_text_datum_impl(int text_datum) -> void {
    M5.Display.setTextDatum(text_datum);
}

auto m5_fill_rect_impl(int pos_x, int pos_y, int width, int height, int color) -> void {
    M5.Display.fillRect(pos_x, pos_y, width, height, color);
}

#ifdef ARDUINO
// M5Stack用TimeManager実装（全デバイス共通）
class M5StackTimeManager : public ITimeManager {
public:
    auto getCurrentMillis() const -> unsigned long override { return millis(); }
    auto getCurrentTime() const -> time_t override { return time(nullptr); }
};
#endif

// --- アラームリスト ---
std::vector<time_t> alarm_times;

// --- 状態管理クラスのグローバル生成 ---
StateManager state_manager;
DisplayAdapter display_adapter;
InputDisplayViewImpl input_display_view_impl(&display_adapter);
MainDisplayViewImpl main_display_view_impl(&display_adapter);
AlarmDisplayViewImpl alarm_display_view_impl(&display_adapter);
SettingsDisplayViewImpl settings_display_view_impl(&display_adapter);
DateTimeInputViewImpl datetime_input_view_impl(&display_adapter);
TimeLogic time_logic;
AlarmLogic alarm_logic;
SettingsLogic settings_logic;
ButtonManager button_manager;

#ifdef ARDUINO
// M5Stack関連のクラス（全デバイス共通）
const std::shared_ptr<DateTimeAdapter> m5_time_provider = std::make_shared<DateTimeAdapter>();
const std::shared_ptr<M5StackTimeManager> m5_time_manager = std::make_shared<M5StackTimeManager>();
InputLogic input_logic(m5_time_provider);
InputDisplayState input_display_state(&input_logic, &input_display_view_impl);
MainDisplayState main_display_state(&state_manager, &input_display_state, &main_display_view_impl, &time_logic, &alarm_logic);
AlarmDisplayState alarm_display_state(&state_manager, &alarm_display_view_impl, m5_time_provider, m5_time_manager);
SettingsDisplayState settings_display_state(&settings_logic, &settings_display_view_impl);
DateTimeInputState datetime_input_state(m5_time_provider.get(), &datetime_input_view_impl);
#else
// Native環境用のモック（テスト用）
InputLogic input_logic(nullptr);
InputDisplayState input_display_state(&input_logic, &input_display_view_impl);
MainDisplayState main_display_state(&state_manager, &input_display_state, &main_display_view_impl, &time_logic, &alarm_logic);
AlarmDisplayState alarm_display_state(&state_manager, &alarm_display_view_impl, nullptr, nullptr);
SettingsDisplayState settings_display_state(&settings_logic, &settings_display_view_impl);
DateTimeInputState datetime_input_state(nullptr, &datetime_input_view_impl);
#endif

// 統一されたsetup関数
#ifdef ARDUINO
void setup() {
    auto cfg = M5.config();
    cfg.clear_display = true;
    cfg.output_power = true;
    M5.begin(cfg);
    M5.Display.setTextColor(AMBER_COLOR, TFT_BLACK);
    
    // アラームリスト初期化
    alarm_times.clear();
    
    // 状態管理初期化
    state_manager.initialize(&main_display_state);
    
    // 描画関数の設定
    setFillRectImpl(m5_fill_rect_impl);
    setFillProgressBarSpriteImpl(m5_progress_bar_impl);
}
#endif

// ... 既存のloop()とmain()関数
```

## 3. src/DisplayAdapter.hの修正

```cpp
#pragma once
#include "IDisplay.h"
#include <Arduino.h>
#include <M5Unified.h>
#include <M5GFX.h>

class DisplayAdapter : public IDisplay {
public:
    void clear() override {
        M5.Display.fillScreen(TFT_BLACK);
    }
    
    void drawText(int x, int y, const char* text, int fontSize) override {
        M5.Display.setTextFont(fontSize);
        M5.Display.drawString(text, x, y);
    }
    
    void setTextColor(uint32_t color, uint32_t bgColor) override {
        M5.Display.setTextColor(color, bgColor);
    }
    
    void fillRect(int x, int y, int w, int h, uint32_t color) override {
        M5.Display.fillRect(x, y, w, h, color);
    }
    
    void drawRect(int x, int y, int w, int h, uint32_t color) override {
        M5.Display.drawRect(x, y, w, h, color);
    }
    
    void setTextDatum(int datum) override {
        M5.Display.setTextDatum(datum);
    }
    
    void setTextFont(int font) override {
        M5.Display.setTextFont(font);
    }
    
    void fillProgressBarSprite(int x, int y, int w, int h, int percent) override {
        // M5GFXの正しいスプライト実装
        M5Canvas canvas(&M5.Display);
        canvas.createSprite(w, h);
        canvas.fillSprite(TFT_BLACK);
        canvas.drawRect(0, 0, w, h, AMBER_COLOR);
        
        int fillW = (w - 2) * percent / 100;
        if (fillW > 0) {
            canvas.fillRect(1, 1, fillW, h - 2, AMBER_COLOR);
        }
        
        canvas.pushSprite(x, y);
        canvas.deleteSprite();
    }
    
    void drawLine(int x0, int y0, int x1, int y1, uint32_t color) override {
        M5.Display.drawLine(x0, y0, x1, y1, color);
    }
    
    int getTextDatum() const override {
        return M5.Display.getTextDatum();
    }
};
```

## 4. 削除する不要な依存関係

```ini
; 削除する項目
lib_deps =
    # m5stack/M5Stack @ ^0.4.3  # 削除（M5Unifiedに統一）
    # WiFiProv                   # 削除（未使用）
    # arduino-libraries/NTPClient @ ^3.2.1  # 削除（未使用）
```

## 5. ビルド・テスト手順

```bash
# M5Stack Fire向けビルド
pio run -e m5stack-fire

# M5Stack Core2向けビルド
pio run -e m5stack-core2

# テスト実行（Native環境）
pio test -e native

# 静的解析
pio check -e native

# カバレッジ測定
python scripts/test_coverage.py --quick
```

## 6. 一気に実装する手順

### 6.1 全ファイル一括修正
```bash
# 1. platformio.iniの修正
# 2. src/main.cppの修正
# 3. src/DisplayAdapter.hの修正

# 一括コミット
git add .
git commit -m "feat: M5Unified対応の完全移行

- 環境継承による設定統一
- M5Unified/M5GFXによる統一API
- 不要な依存関係削除
- 統一されたスプライト実装"
```

### 6.2 動作確認
```bash
# Fire環境での動作確認
pio run -e m5stack-fire

# Core2環境での動作確認
pio run -e m5stack-core2

# テスト実行
pio test -e native

# 静的解析
pio check -e native
```

### 6.3 ドキュメント更新
```bash
# ドキュメント更新
git add doc/
git commit -m "docs: M5Unified対応のドキュメント更新"
```

## 7. 修正のポイント

### 1. **環境継承による設定統一**
- 共通設定を`m5stack-base`環境に集約
- デバイス固有の設定のみ差分で記述

### 2. **M5Unifiedによる完全統一**
- `M5.Display`で統一されたAPI
- `M5Canvas`による統一されたスプライト機能
- デバイス固有の分岐を最小限に削減

### 3. **不要な依存関係の削除**
- WiFiProv、NTPClientを削除（未使用）
- 従来のM5Stackライブラリを削除

### 4. **upload_speed統一**
- Fire v2.7とCore2で同じ`upload_speed = 1500000`を使用

### 5. **一気に実装**
- 段階的移行は困難なため、一括で実装
- ビルドエラーを一気に解決

この修正により、**M5Stack FireとCore2の両方に対応しつつ、保守性と拡張性を大幅に向上**させることができます。

## 8. 自動実行手順

### 8.1 platformio.iniの修正
```bash
# platformio.iniを修正
# 環境継承、M5Unified依存関係、upload_speed統一
```

### 8.2 src/main.cppの修正
```bash
# M5Unified/M5GFX include追加
# 統一された描画関数実装
# M5Canvasによるスプライト実装
```

### 8.3 src/DisplayAdapter.hの修正
```bash
# M5Unified/M5GFX include追加
# M5Canvasによる統一スプライト実装
```

### 8.4 一括コミットとテスト
```bash
# 全ファイルをコミット
git add .
git commit -m "feat: M5Unified対応の完全移行"

# ビルドテスト
pio run -e m5stack-fire
pio run -e m5stack-core2

# テスト実行
pio test -e native
``` 