        -:    0:Source:C:/msys64/ucrt64/include/c++/15.1.0/bits/vector.tcc
        -:    0:Graph:test_time_logic_minimal_coverage-time_logic.gcno
        -:    0:Data:test_time_logic_minimal_coverage-time_logic.gcda
        -:    0:Runs:1
        -:    1:// Vector implementation (out of line) -*- C++ -*-
        -:    2:
        -:    3:// Copyright (C) 2001-2025 Free Software Foundation, Inc.
        -:    4://
        -:    5:// This file is part of the GNU ISO C++ Library.  This library is free
        -:    6:// software; you can redistribute it and/or modify it under the
        -:    7:// terms of the GNU General Public License as published by the
        -:    8:// Free Software Foundation; either version 3, or (at your option)
        -:    9:// any later version.
        -:   10:
        -:   11:// This library is distributed in the hope that it will be useful,
        -:   12:// but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   13:// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   14:// GNU General Public License for more details.
        -:   15:
        -:   16:// Under Section 7 of GPL version 3, you are granted additional
        -:   17:// permissions described in the GCC Runtime Library Exception, version
        -:   18:// 3.1, as published by the Free Software Foundation.
        -:   19:
        -:   20:// You should have received a copy of the GNU General Public License and
        -:   21:// a copy of the GCC Runtime Library Exception along with this program;
        -:   22:// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
        -:   23:// <http://www.gnu.org/licenses/>.
        -:   24:
        -:   25:/*
        -:   26: *
        -:   27: * Copyright (c) 1994
        -:   28: * Hewlett-Packard Company
        -:   29: *
        -:   30: * Permission to use, copy, modify, distribute and sell this software
        -:   31: * and its documentation for any purpose is hereby granted without fee,
        -:   32: * provided that the above copyright notice appear in all copies and
        -:   33: * that both that copyright notice and this permission notice appear
        -:   34: * in supporting documentation.  Hewlett-Packard Company makes no
        -:   35: * representations about the suitability of this software for any
        -:   36: * purpose.  It is provided "as is" without express or implied warranty.
        -:   37: *
        -:   38: *
        -:   39: * Copyright (c) 1996
        -:   40: * Silicon Graphics Computer Systems, Inc.
        -:   41: *
        -:   42: * Permission to use, copy, modify, distribute and sell this software
        -:   43: * and its documentation for any purpose is hereby granted without fee,
        -:   44: * provided that the above copyright notice appear in all copies and
        -:   45: * that both that copyright notice and this permission notice appear
        -:   46: * in supporting documentation.  Silicon Graphics makes no
        -:   47: * representations about the suitability of this  software for any
        -:   48: * purpose.  It is provided "as is" without express or implied warranty.
        -:   49: */
        -:   50:
        -:   51:/** @file bits/vector.tcc
        -:   52: *  This is an internal header file, included by other library headers.
        -:   53: *  Do not attempt to use it directly. @headername{vector}
        -:   54: */
        -:   55:
        -:   56:#ifndef _VECTOR_TCC
        -:   57:#define _VECTOR_TCC 1
        -:   58:
        -:   59:namespace std _GLIBCXX_VISIBILITY(default)
        -:   60:{
        -:   61:_GLIBCXX_BEGIN_NAMESPACE_VERSION
        -:   62:_GLIBCXX_BEGIN_NAMESPACE_CONTAINER
        -:   63:
        -:   64:  template<typename _Tp, typename _Alloc>
        -:   65:    _GLIBCXX20_CONSTEXPR
        -:   66:    void
        -:   67:    vector<_Tp, _Alloc>::
        -:   68:    reserve(size_type __n)
        -:   69:    {
        -:   70:      if (__n > this->max_size())
        -:   71:	__throw_length_error(__N("vector::reserve"));
        -:   72:      if (this->capacity() < __n)
        -:   73:	{
        -:   74:	  const size_type __old_size = size();
        -:   75:	  pointer __tmp;
        -:   76:#if __cplusplus >= 201103L
        -:   77:	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
        -:   78:	    {
        -:   79:	      __tmp = this->_M_allocate(__n);
        -:   80:	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
        -:   81:			  __tmp, _M_get_Tp_allocator());
        -:   82:	    }
        -:   83:	  else
        -:   84:#endif
        -:   85:	    {
        -:   86:	      __tmp = _M_allocate_and_copy(__n,
        -:   87:		_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_start),
        -:   88:		_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_finish));
        -:   89:	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
        -:   90:			    _M_get_Tp_allocator());
        -:   91:	    }
        -:   92:	  _GLIBCXX_ASAN_ANNOTATE_REINIT;
        -:   93:	  _M_deallocate(this->_M_impl._M_start,
        -:   94:			this->_M_impl._M_end_of_storage
        -:   95:			- this->_M_impl._M_start);
        -:   96:	  this->_M_impl._M_start = __tmp;
        -:   97:	  this->_M_impl._M_finish = __tmp + __old_size;
        -:   98:	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
        -:   99:	}
        -:  100:    }
        -:  101:
        -:  102:#if __cplusplus >= 201103L
        -:  103:  template<typename _Tp, typename _Alloc>
        -:  104:    template<typename... _Args>
        -:  105:#if __cplusplus > 201402L
        -:  106:      _GLIBCXX20_CONSTEXPR
        -:  107:      typename vector<_Tp, _Alloc>::reference
        -:  108:#else
        -:  109:      void
        -:  110:#endif
        -:  111:      vector<_Tp, _Alloc>::
        -:  112:      emplace_back(_Args&&... __args)
        -:  113:      {
        -:  114:	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
        -:  115:	  {
        -:  116:	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
        -:  117:	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
        -:  118:				     std::forward<_Args>(__args)...);
        -:  119:	    ++this->_M_impl._M_finish;
        -:  120:	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
        -:  121:	  }
        -:  122:	else
        -:  123:	  _M_realloc_append(std::forward<_Args>(__args)...);
        -:  124:#if __cplusplus > 201402L
        -:  125:	return back();
        -:  126:#endif
        -:  127:      }
        -:  128:#endif
        -:  129:
        -:  130:  template<typename _Tp, typename _Alloc>
        -:  131:    _GLIBCXX20_CONSTEXPR
        -:  132:    typename vector<_Tp, _Alloc>::iterator
        -:  133:    vector<_Tp, _Alloc>::
        -:  134:#if __cplusplus >= 201103L
        -:  135:    insert(const_iterator __position, const value_type& __x)
        -:  136:#else
        -:  137:    insert(iterator __position, const value_type& __x)
        -:  138:#endif
        -:  139:    {
        -:  140:      const size_type __n = __position - begin();
        -:  141:      if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
        -:  142:	{
        -:  143:	  __glibcxx_assert(__position != const_iterator());
        -:  144:	  if (!(__position != const_iterator()))
        -:  145:	    __builtin_unreachable(); // PR 106434
        -:  146:
        -:  147:	  if (__position == end())
        -:  148:	    {
        -:  149:	      _GLIBCXX_ASAN_ANNOTATE_GROW(1);
        -:  150:	      _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
        -:  151:				       __x);
        -:  152:	      ++this->_M_impl._M_finish;
        -:  153:	      _GLIBCXX_ASAN_ANNOTATE_GREW(1);
        -:  154:	    }
        -:  155:	  else
        -:  156:	    {
        -:  157:#if __cplusplus >= 201103L
        -:  158:	      const auto __pos = begin() + (__position - cbegin());
        -:  159:	      // __x could be an existing element of this vector, so make a
        -:  160:	      // copy of it before _M_insert_aux moves elements around.
        -:  161:	      _Temporary_value __x_copy(this, __x);
        -:  162:	      _M_insert_aux(__pos, std::move(__x_copy._M_val()));
        -:  163:#else
        -:  164:	      _M_insert_aux(__position, __x);
        -:  165:#endif
        -:  166:	    }
        -:  167:	}
        -:  168:      else
        -:  169:#if __cplusplus >= 201103L
        -:  170:	_M_realloc_insert(begin() + (__position - cbegin()), __x);
        -:  171:#else
        -:  172:	_M_realloc_insert(__position, __x);
        -:  173:#endif
        -:  174:
        -:  175:      return iterator(this->_M_impl._M_start + __n);
        -:  176:    }
        -:  177:
        -:  178:  template<typename _Tp, typename _Alloc>
        -:  179:    _GLIBCXX20_CONSTEXPR
        -:  180:    typename vector<_Tp, _Alloc>::iterator
    #####:  181:    vector<_Tp, _Alloc>::
        -:  182:    _M_erase(iterator __position)
        -:  183:    {
    #####:  184:      if (__position + 1 != end())
    #####:  185:	_GLIBCXX_MOVE3(__position + 1, end(), __position);
    #####:  186:      --this->_M_impl._M_finish;
    #####:  187:      _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
        -:  188:      _GLIBCXX_ASAN_ANNOTATE_SHRINK(1);
    #####:  189:      return __position;
        -:  190:    }
        -:  191:
        -:  192:  template<typename _Tp, typename _Alloc>
        -:  193:    _GLIBCXX20_CONSTEXPR
        -:  194:    typename vector<_Tp, _Alloc>::iterator
    #####:  195:    vector<_Tp, _Alloc>::
        -:  196:    _M_erase(iterator __first, iterator __last)
        -:  197:    {
    #####:  198:      if (__first != __last)
        -:  199:	{
    #####:  200:	  if (__last != end())
    #####:  201:	    _GLIBCXX_MOVE3(__last, end(), __first);
    #####:  202:	  _M_erase_at_end(__first.base() + (end() - __last));
        -:  203:	}
    #####:  204:      return __first;
        -:  205:    }
        -:  206:
        -:  207:  template<typename _Tp, typename _Alloc>
        -:  208:    _GLIBCXX20_CONSTEXPR
        -:  209:    vector<_Tp, _Alloc>&
        -:  210:    vector<_Tp, _Alloc>::
        -:  211:    operator=(const vector<_Tp, _Alloc>& __x)
        -:  212:    {
        -:  213:      if (std::__addressof(__x) != this)
        -:  214:	{
        -:  215:	  _GLIBCXX_ASAN_ANNOTATE_REINIT;
        -:  216:#if __cplusplus >= 201103L
        -:  217:	  if (_Alloc_traits::_S_propagate_on_copy_assign())
        -:  218:	    {
        -:  219:	      if (!_Alloc_traits::_S_always_equal()
        -:  220:	          && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
        -:  221:	        {
        -:  222:		  // replacement allocator cannot free existing storage
        -:  223:		  this->clear();
        -:  224:		  _M_deallocate(this->_M_impl._M_start,
        -:  225:				this->_M_impl._M_end_of_storage
        -:  226:				- this->_M_impl._M_start);
        -:  227:		  this->_M_impl._M_start = nullptr;
        -:  228:		  this->_M_impl._M_finish = nullptr;
        -:  229:		  this->_M_impl._M_end_of_storage = nullptr;
        -:  230:		}
        -:  231:	      std::__alloc_on_copy(_M_get_Tp_allocator(),
        -:  232:				   __x._M_get_Tp_allocator());
        -:  233:	    }
        -:  234:#endif
        -:  235:	  const size_type __xlen = __x.size();
        -:  236:	  if (__xlen > capacity())
        -:  237:	    {
        -:  238:	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
        -:  239:						   __x.end());
        -:  240:	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
        -:  241:			    _M_get_Tp_allocator());
        -:  242:	      _M_deallocate(this->_M_impl._M_start,
        -:  243:			    this->_M_impl._M_end_of_storage
        -:  244:			    - this->_M_impl._M_start);
        -:  245:	      this->_M_impl._M_start = __tmp;
        -:  246:	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
        -:  247:	    }
        -:  248:	  else if (size() >= __xlen)
        -:  249:	    {
        -:  250:	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
        -:  251:			    end(), _M_get_Tp_allocator());
        -:  252:	    }
        -:  253:	  else
        -:  254:	    {
        -:  255:	      std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
        -:  256:			this->_M_impl._M_start);
        -:  257:	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
        -:  258:					  __x._M_impl._M_finish,
        -:  259:					  this->_M_impl._M_finish,
        -:  260:					  _M_get_Tp_allocator());
        -:  261:	    }
        -:  262:	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
        -:  263:	}
        -:  264:      return *this;
        -:  265:    }
        -:  266:
        -:  267:  template<typename _Tp, typename _Alloc>
        -:  268:    _GLIBCXX20_CONSTEXPR
        -:  269:    void
        -:  270:    vector<_Tp, _Alloc>::
        -:  271:    _M_fill_assign(size_t __n, const value_type& __val)
        -:  272:    {
        -:  273:      const size_type __sz = size();
        -:  274:      if (__n > capacity())
        -:  275:	{
        -:  276:	  if (__n <= __sz)
        -:  277:	    __builtin_unreachable();
        -:  278:	  vector __tmp(__n, __val, _M_get_Tp_allocator());
        -:  279:	  __tmp._M_impl._M_swap_data(this->_M_impl);
        -:  280:	}
        -:  281:      else if (__n > __sz)
        -:  282:	{
        -:  283:	  std::fill(begin(), end(), __val);
        -:  284:	  const size_type __add = __n - __sz;
        -:  285:	  _GLIBCXX_ASAN_ANNOTATE_GROW(__add);
        -:  286:	  this->_M_impl._M_finish =
        -:  287:	    std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
        -:  288:					  __add, __val, _M_get_Tp_allocator());
        -:  289:	  _GLIBCXX_ASAN_ANNOTATE_GREW(__add);
        -:  290:	}
        -:  291:      else
        -:  292:        _M_erase_at_end(std::fill_n(this->_M_impl._M_start, __n, __val));
        -:  293:    }
        -:  294:
        -:  295:  template<typename _Tp, typename _Alloc>
        -:  296:    template<typename _InputIterator>
        -:  297:      _GLIBCXX20_CONSTEXPR
        -:  298:      void
        -:  299:      vector<_Tp, _Alloc>::
        -:  300:      _M_assign_aux(_InputIterator __first, _InputIterator __last,
        -:  301:		    std::input_iterator_tag)
        -:  302:      {
        -:  303:	pointer __cur(this->_M_impl._M_start);
        -:  304:	for (; __first != __last && __cur != this->_M_impl._M_finish;
        -:  305:	     ++__cur, (void)++__first)
        -:  306:	  *__cur = *__first;
        -:  307:	if (__first == __last)
        -:  308:	  _M_erase_at_end(__cur);
        -:  309:	else
        -:  310:	  _M_range_insert(end(), __first, __last,
        -:  311:			  std::__iterator_category(__first));
        -:  312:      }
        -:  313:
        -:  314:  template<typename _Tp, typename _Alloc>
        -:  315:    template<typename _ForwardIterator>
        -:  316:      _GLIBCXX20_CONSTEXPR
        -:  317:      void
        -:  318:      vector<_Tp, _Alloc>::
        -:  319:      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
        -:  320:		    std::forward_iterator_tag)
        -:  321:      {
        -:  322:	const size_type __sz = size();
        -:  323:	const size_type __len = std::distance(__first, __last);
        -:  324:
        -:  325:	if (__len > capacity())
        -:  326:	  {
        -:  327:	    if (__len <= __sz)
        -:  328:	      __builtin_unreachable();
        -:  329:
        -:  330:	    _S_check_init_len(__len, _M_get_Tp_allocator());
        -:  331:	    pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
        -:  332:	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
        -:  333:			  _M_get_Tp_allocator());
        -:  334:	    _GLIBCXX_ASAN_ANNOTATE_REINIT;
        -:  335:	    _M_deallocate(this->_M_impl._M_start,
        -:  336:			  this->_M_impl._M_end_of_storage
        -:  337:			  - this->_M_impl._M_start);
        -:  338:	    this->_M_impl._M_start = __tmp;
        -:  339:	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
        -:  340:	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
        -:  341:	  }
        -:  342:	else if (__sz >= __len)
        -:  343:	  _M_erase_at_end(std::copy(__first, __last, this->_M_impl._M_start));
        -:  344:	else
        -:  345:	  {
        -:  346:	    _ForwardIterator __mid = __first;
        -:  347:	    std::advance(__mid, __sz);
        -:  348:	    std::copy(__first, __mid, this->_M_impl._M_start);
        -:  349:	    const size_type __attribute__((__unused__)) __n = __len - __sz;
        -:  350:	    _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
        -:  351:	    this->_M_impl._M_finish =
        -:  352:	      std::__uninitialized_copy_a(__mid, __last,
        -:  353:					  this->_M_impl._M_finish,
        -:  354:					  _M_get_Tp_allocator());
        -:  355:	    _GLIBCXX_ASAN_ANNOTATE_GREW(__n);
        -:  356:	  }
        -:  357:      }
        -:  358:
        -:  359:#if __cplusplus >= 201103L
        -:  360:  template<typename _Tp, typename _Alloc>
        -:  361:    _GLIBCXX20_CONSTEXPR
        -:  362:    auto
        -:  363:    vector<_Tp, _Alloc>::
        -:  364:    _M_insert_rval(const_iterator __position, value_type&& __v) -> iterator
        -:  365:    {
        -:  366:      const auto __n = __position - cbegin();
        -:  367:      if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
        -:  368:	if (__position == cend())
        -:  369:	  {
        -:  370:	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
        -:  371:	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
        -:  372:				     std::move(__v));
        -:  373:	    ++this->_M_impl._M_finish;
        -:  374:	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
        -:  375:	  }
        -:  376:	else
        -:  377:	  _M_insert_aux(begin() + __n, std::move(__v));
        -:  378:      else
        -:  379:	_M_realloc_insert(begin() + __n, std::move(__v));
        -:  380:
        -:  381:      return iterator(this->_M_impl._M_start + __n);
        -:  382:    }
        -:  383:
        -:  384:  template<typename _Tp, typename _Alloc>
        -:  385:    template<typename... _Args>
        -:  386:      _GLIBCXX20_CONSTEXPR
        -:  387:      auto
        -:  388:      vector<_Tp, _Alloc>::
        -:  389:      _M_emplace_aux(const_iterator __position, _Args&&... __args)
        -:  390:      -> iterator
        -:  391:      {
        -:  392:	const auto __n = __position - cbegin();
        -:  393:	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
        -:  394:	  if (__position == cend())
        -:  395:	    {
        -:  396:	      _GLIBCXX_ASAN_ANNOTATE_GROW(1);
        -:  397:	      _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
        -:  398:				       std::forward<_Args>(__args)...);
        -:  399:	      ++this->_M_impl._M_finish;
        -:  400:	      _GLIBCXX_ASAN_ANNOTATE_GREW(1);
        -:  401:	    }
        -:  402:	  else
        -:  403:	    {
        -:  404:	      // We need to construct a temporary because something in __args...
        -:  405:	      // could alias one of the elements of the container and so we
        -:  406:	      // need to use it before _M_insert_aux moves elements around.
        -:  407:	      _Temporary_value __tmp(this, std::forward<_Args>(__args)...);
        -:  408:	      _M_insert_aux(begin() + __n, std::move(__tmp._M_val()));
        -:  409:	    }
        -:  410:	else
        -:  411:	  _M_realloc_insert(begin() + __n, std::forward<_Args>(__args)...);
        -:  412:
        -:  413:	return iterator(this->_M_impl._M_start + __n);
        -:  414:      }
        -:  415:
        -:  416:  template<typename _Tp, typename _Alloc>
        -:  417:    template<typename _Arg>
        -:  418:      _GLIBCXX20_CONSTEXPR
        -:  419:      void
        -:  420:      vector<_Tp, _Alloc>::
        -:  421:      _M_insert_aux(iterator __position, _Arg&& __arg)
        -:  422:#else
        -:  423:  template<typename _Tp, typename _Alloc>
        -:  424:    void
        -:  425:    vector<_Tp, _Alloc>::
        -:  426:    _M_insert_aux(iterator __position, const _Tp& __x)
        -:  427:#endif
        -:  428:    {
        -:  429:      _GLIBCXX_ASAN_ANNOTATE_GROW(1);
        -:  430:      _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
        -:  431:			       _GLIBCXX_MOVE(*(this->_M_impl._M_finish - 1)));
        -:  432:      ++this->_M_impl._M_finish;
        -:  433:      _GLIBCXX_ASAN_ANNOTATE_GREW(1);
        -:  434:#if __cplusplus < 201103L
        -:  435:      _Tp __x_copy = __x;
        -:  436:#endif
        -:  437:      _GLIBCXX_MOVE_BACKWARD3(__position.base(),
        -:  438:			      this->_M_impl._M_finish - 2,
        -:  439:			      this->_M_impl._M_finish - 1);
        -:  440:#if __cplusplus < 201103L
        -:  441:      *__position = __x_copy;
        -:  442:#else
        -:  443:      *__position = std::forward<_Arg>(__arg);
        -:  444:#endif
        -:  445:    }
        -:  446:
        -:  447:#if __cplusplus >= 201103L
        -:  448:  template<typename _Tp, typename _Alloc>
        -:  449:    template<typename... _Args>
        -:  450:      _GLIBCXX20_CONSTEXPR
        -:  451:      void
        -:  452:      vector<_Tp, _Alloc>::
        -:  453:      _M_realloc_insert(iterator __position, _Args&&... __args)
        -:  454:#else
        -:  455:  template<typename _Tp, typename _Alloc>
        -:  456:    void
        -:  457:    vector<_Tp, _Alloc>::
        -:  458:    _M_realloc_insert(iterator __position, const _Tp& __x)
        -:  459:#endif
        -:  460:    {
        -:  461:      const size_type __len = _M_check_len(1u, "vector::_M_realloc_insert");
        -:  462:      if (__len <= 0)
        -:  463:	__builtin_unreachable ();
        -:  464:      pointer __old_start = this->_M_impl._M_start;
        -:  465:      pointer __old_finish = this->_M_impl._M_finish;
        -:  466:      const size_type __elems_before = __position - begin();
        -:  467:      pointer __new_start(this->_M_allocate(__len));
        -:  468:      pointer __new_finish(__new_start);
        -:  469:
        -:  470:      {
        -:  471:	_Guard_alloc __guard(__new_start, __len, *this);
        -:  472:
        -:  473:	// The order of the three operations is dictated by the C++11
        -:  474:	// case, where the moves could alter a new element belonging
        -:  475:	// to the existing vector.  This is an issue only for callers
        -:  476:	// taking the element by lvalue ref (see last bullet of C++11
        -:  477:	// [res.on.arguments]).
        -:  478:
        -:  479:	// If this throws, the existing elements are unchanged.
        -:  480:#if __cplusplus >= 201103L
        -:  481:	_Alloc_traits::construct(this->_M_impl,
        -:  482:				 std::__to_address(__new_start + __elems_before),
        -:  483:				 std::forward<_Args>(__args)...);
        -:  484:#else
        -:  485:	_Alloc_traits::construct(this->_M_impl,
        -:  486:				 __new_start + __elems_before,
        -:  487:				 __x);
        -:  488:#endif
        -:  489:
        -:  490:#if __cplusplus >= 201103L
        -:  491:	if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
        -:  492:	  {
        -:  493:	    // Relocation cannot throw.
        -:  494:	    __new_finish = _S_relocate(__old_start, __position.base(),
        -:  495:				       __new_start, _M_get_Tp_allocator());
        -:  496:	    ++__new_finish;
        -:  497:	    __new_finish = _S_relocate(__position.base(), __old_finish,
        -:  498:				       __new_finish, _M_get_Tp_allocator());
        -:  499:	  }
        -:  500:	else
        -:  501:#endif
        -:  502:	  {
        -:  503:	    // RAII type to destroy initialized elements.
        -:  504:	    struct _Guard_elts
        -:  505:	    {
        -:  506:	      pointer _M_first, _M_last;  // Elements to destroy
        -:  507:	      _Tp_alloc_type& _M_alloc;
        -:  508:
        -:  509:	      _GLIBCXX20_CONSTEXPR
        -:  510:	      _Guard_elts(pointer __elt, _Tp_alloc_type& __a)
        -:  511:	      : _M_first(__elt), _M_last(__elt + 1), _M_alloc(__a)
        -:  512:	      { }
        -:  513:
        -:  514:	      _GLIBCXX20_CONSTEXPR
        -:  515:	      ~_Guard_elts()
        -:  516:	      { std::_Destroy(_M_first, _M_last, _M_alloc); }
        -:  517:
        -:  518:	    private:
        -:  519:	      _Guard_elts(const _Guard_elts&);
        -:  520:	    };
        -:  521:
        -:  522:	    // Guard the new element so it will be destroyed if anything throws.
        -:  523:	    _Guard_elts __guard_elts(__new_start + __elems_before, _M_impl);
        -:  524:
        -:  525:	    __new_finish = std::__uninitialized_move_if_noexcept_a(
        -:  526:			     __old_start, __position.base(),
        -:  527:			     __new_start, _M_get_Tp_allocator());
        -:  528:
        -:  529:	    ++__new_finish;
        -:  530:	    // Guard everything before the new element too.
        -:  531:	    __guard_elts._M_first = __new_start;
        -:  532:
        -:  533:	    __new_finish = std::__uninitialized_move_if_noexcept_a(
        -:  534:			      __position.base(), __old_finish,
        -:  535:			      __new_finish, _M_get_Tp_allocator());
        -:  536:
        -:  537:	    // New storage has been fully initialized, destroy the old elements.
        -:  538:	    __guard_elts._M_first = __old_start;
        -:  539:	    __guard_elts._M_last = __old_finish;
        -:  540:	  }
        -:  541:	__guard._M_storage = __old_start;
        -:  542:	__guard._M_len = this->_M_impl._M_end_of_storage - __old_start;
        -:  543:      }
        -:  544:      // deallocate should be called before assignments to _M_impl,
        -:  545:      // to avoid call-clobbering
        -:  546:
        -:  547:      this->_M_impl._M_start = __new_start;
        -:  548:      this->_M_impl._M_finish = __new_finish;
        -:  549:      this->_M_impl._M_end_of_storage = __new_start + __len;
        -:  550:    }
        -:  551:
        -:  552:#if __cplusplus >= 201103L
        -:  553:  template<typename _Tp, typename _Alloc>
        -:  554:    template<typename... _Args>
        -:  555:      _GLIBCXX20_CONSTEXPR
        -:  556:      void
    #####:  557:      vector<_Tp, _Alloc>::
        -:  558:      _M_realloc_append(_Args&&... __args)
        -:  559:#else
        -:  560:  template<typename _Tp, typename _Alloc>
        -:  561:    void
        -:  562:    vector<_Tp, _Alloc>::
        -:  563:    _M_realloc_append(const _Tp& __x)
        -:  564:#endif
        -:  565:    {
    #####:  566:      const size_type __len = _M_check_len(1u, "vector::_M_realloc_append");
    #####:  567:      if (__len <= 0)
    #####:  568:	__builtin_unreachable ();
    #####:  569:      pointer __old_start = this->_M_impl._M_start;
    #####:  570:      pointer __old_finish = this->_M_impl._M_finish;
    #####:  571:      const size_type __elems = end() - begin();
    #####:  572:      pointer __new_start(this->_M_allocate(__len));
    #####:  573:      pointer __new_finish(__new_start);
        -:  574:
        -:  575:      {
    #####:  576:	_Guard_alloc __guard(__new_start, __len, *this);
        -:  577:
        -:  578:	// The order of the three operations is dictated by the C++11
        -:  579:	// case, where the moves could alter a new element belonging
        -:  580:	// to the existing vector.  This is an issue only for callers
        -:  581:	// taking the element by lvalue ref (see last bullet of C++11
        -:  582:	// [res.on.arguments]).
        -:  583:
        -:  584:	// If this throws, the existing elements are unchanged.
        -:  585:#if __cplusplus >= 201103L
    #####:  586:	_Alloc_traits::construct(this->_M_impl,
    #####:  587:				 std::__to_address(__new_start + __elems),
        -:  588:				 std::forward<_Args>(__args)...);
        -:  589:#else
        -:  590:	_Alloc_traits::construct(this->_M_impl,
        -:  591:				 __new_start + __elems,
        -:  592:				 __x);
        -:  593:#endif
        -:  594:
        -:  595:#if __cplusplus >= 201103L
    #####:  596:	if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
        -:  597:	  {
        -:  598:	    // Relocation cannot throw.
    #####:  599:	    __new_finish = _S_relocate(__old_start, __old_finish,
    #####:  600:				       __new_start, _M_get_Tp_allocator());
    #####:  601:	    ++__new_finish;
        -:  602:	  }
        -:  603:	else
        -:  604:#endif
        -:  605:	  {
        -:  606:	    // RAII type to destroy initialized elements.
        -:  607:	    struct _Guard_elts
        -:  608:	    {
        -:  609:	      pointer _M_first, _M_last;  // Elements to destroy
        -:  610:	      _Tp_alloc_type& _M_alloc;
        -:  611:
        -:  612:	      _GLIBCXX20_CONSTEXPR
    #####:  613:	      _Guard_elts(pointer __elt, _Tp_alloc_type& __a)
    #####:  614:	      : _M_first(__elt), _M_last(__elt + 1), _M_alloc(__a)
    #####:  615:	      { }
        -:  616:
        -:  617:	      _GLIBCXX20_CONSTEXPR
    #####:  618:	      ~_Guard_elts()
    #####:  619:	      { std::_Destroy(_M_first, _M_last, _M_alloc); }
        -:  620:
        -:  621:	    private:
        -:  622:	      _Guard_elts(const _Guard_elts&);
        -:  623:	    };
        -:  624:
        -:  625:	    // Guard the new element so it will be destroyed if anything throws.
    #####:  626:	    _Guard_elts __guard_elts(__new_start + __elems, _M_impl);
        -:  627:
    #####:  628:	    __new_finish = std::__uninitialized_move_if_noexcept_a(
        -:  629:			     __old_start, __old_finish,
    #####:  630:			     __new_start, _M_get_Tp_allocator());
        -:  631:
    #####:  632:	    ++__new_finish;
        -:  633:
        -:  634:	    // New storage has been fully initialized, destroy the old elements.
    #####:  635:	    __guard_elts._M_first = __old_start;
    #####:  636:	    __guard_elts._M_last = __old_finish;
    #####:  637:	  }
    #####:  638:	__guard._M_storage = __old_start;
    #####:  639:	__guard._M_len = this->_M_impl._M_end_of_storage - __old_start;
    #####:  640:      }
        -:  641:      // deallocate should be called before assignments to _M_impl,
        -:  642:      // to avoid call-clobbering
        -:  643:
    #####:  644:      this->_M_impl._M_start = __new_start;
    #####:  645:      this->_M_impl._M_finish = __new_finish;
    #####:  646:      this->_M_impl._M_end_of_storage = __new_start + __len;
    #####:  647:    }
        -:  648:
        -:  649:  template<typename _Tp, typename _Alloc>
        -:  650:    _GLIBCXX20_CONSTEXPR
        -:  651:    void
        -:  652:    vector<_Tp, _Alloc>::
        -:  653:    _M_fill_insert(iterator __position, size_type __n, const value_type& __x)
        -:  654:    {
        -:  655:      if (__n != 0)
        -:  656:	{
        -:  657:	  if (size_type(this->_M_impl._M_end_of_storage
        -:  658:			- this->_M_impl._M_finish) >= __n)
        -:  659:	    {
        -:  660:#if __cplusplus < 201103L
        -:  661:	      value_type __x_copy = __x;
        -:  662:#else
        -:  663:	      _Temporary_value __tmp(this, __x);
        -:  664:	      value_type& __x_copy = __tmp._M_val();
        -:  665:#endif
        -:  666:	      const size_type __elems_after = end() - __position;
        -:  667:	      pointer __old_finish(this->_M_impl._M_finish);
        -:  668:	      if (__elems_after > __n)
        -:  669:		{
        -:  670:		  _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
        -:  671:		  std::__uninitialized_move_a(__old_finish - __n,
        -:  672:					      __old_finish,
        -:  673:					      __old_finish,
        -:  674:					      _M_get_Tp_allocator());
        -:  675:		  this->_M_impl._M_finish += __n;
        -:  676:		  _GLIBCXX_ASAN_ANNOTATE_GREW(__n);
        -:  677:		  _GLIBCXX_MOVE_BACKWARD3(__position.base(),
        -:  678:					  __old_finish - __n, __old_finish);
        -:  679:		  std::fill(__position.base(), __position.base() + __n,
        -:  680:			    __x_copy);
        -:  681:		}
        -:  682:	      else
        -:  683:		{
        -:  684:		  _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
        -:  685:		  this->_M_impl._M_finish =
        -:  686:		    std::__uninitialized_fill_n_a(__old_finish,
        -:  687:						  __n - __elems_after,
        -:  688:						  __x_copy,
        -:  689:						  _M_get_Tp_allocator());
        -:  690:		  _GLIBCXX_ASAN_ANNOTATE_GREW(__n - __elems_after);
        -:  691:		  std::__uninitialized_move_a(__position.base(), __old_finish,
        -:  692:					      this->_M_impl._M_finish,
        -:  693:					      _M_get_Tp_allocator());
        -:  694:		  this->_M_impl._M_finish += __elems_after;
        -:  695:		  _GLIBCXX_ASAN_ANNOTATE_GREW(__elems_after);
        -:  696:		  std::fill(__position.base(), __old_finish, __x_copy);
        -:  697:		}
        -:  698:	    }
        -:  699:	  else
        -:  700:	    {
        -:  701:	      // Make local copies of these members because the compiler thinks
        -:  702:	      // the allocator can alter them if 'this' is globally reachable.
        -:  703:	      pointer __old_start = this->_M_impl._M_start;
        -:  704:	      pointer __old_finish = this->_M_impl._M_finish;
        -:  705:	      const pointer __pos = __position.base();
        -:  706:
        -:  707:	      const size_type __len =
        -:  708:		_M_check_len(__n, "vector::_M_fill_insert");
        -:  709:	      const size_type __elems_before = __pos - __old_start;
        -:  710:	      pointer __new_start(this->_M_allocate(__len));
        -:  711:	      pointer __new_finish(__new_start);
        -:  712:	      __try
        -:  713:		{
        -:  714:		  // See _M_realloc_insert above.
        -:  715:		  std::__uninitialized_fill_n_a(__new_start + __elems_before,
        -:  716:						__n, __x,
        -:  717:						_M_get_Tp_allocator());
        -:  718:		  __new_finish = pointer();
        -:  719:
        -:  720:		  __new_finish
        -:  721:		    = std::__uninitialized_move_if_noexcept_a
        -:  722:		    (__old_start, __pos, __new_start, _M_get_Tp_allocator());
        -:  723:
        -:  724:		  __new_finish += __n;
        -:  725:
        -:  726:		  __new_finish
        -:  727:		    = std::__uninitialized_move_if_noexcept_a
        -:  728:		    (__pos, __old_finish, __new_finish, _M_get_Tp_allocator());
        -:  729:		}
        -:  730:	      __catch(...)
        -:  731:		{
        -:  732:		  if (!__new_finish)
        -:  733:		    std::_Destroy(__new_start + __elems_before,
        -:  734:				  __new_start + __elems_before + __n,
        -:  735:				  _M_get_Tp_allocator());
        -:  736:		  else
        -:  737:		    std::_Destroy(__new_start, __new_finish,
        -:  738:				  _M_get_Tp_allocator());
        -:  739:		  _M_deallocate(__new_start, __len);
        -:  740:		  __throw_exception_again;
        -:  741:		}
        -:  742:	      std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
        -:  743:	      _GLIBCXX_ASAN_ANNOTATE_REINIT;
        -:  744:	      _M_deallocate(__old_start,
        -:  745:			    this->_M_impl._M_end_of_storage - __old_start);
        -:  746:	      this->_M_impl._M_start = __new_start;
        -:  747:	      this->_M_impl._M_finish = __new_finish;
        -:  748:	      this->_M_impl._M_end_of_storage = __new_start + __len;
        -:  749:	    }
        -:  750:	}
        -:  751:    }
        -:  752:
        -:  753:#if __cplusplus >= 201103L
        -:  754:  template<typename _Tp, typename _Alloc>
        -:  755:    _GLIBCXX20_CONSTEXPR
        -:  756:    void
        -:  757:    vector<_Tp, _Alloc>::
        -:  758:    _M_default_append(size_type __n)
        -:  759:    {
        -:  760:      if (__n != 0)
        -:  761:	{
        -:  762:	  const size_type __size = size();
        -:  763:	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
        -:  764:					 - this->_M_impl._M_finish);
        -:  765:
        -:  766:	  if (__size > max_size() || __navail > max_size() - __size)
        -:  767:	    __builtin_unreachable();
        -:  768:
        -:  769:	  if (__navail >= __n)
        -:  770:	    {
        -:  771:	      if (!this->_M_impl._M_finish)
        -:  772:		__builtin_unreachable();
        -:  773:
        -:  774:	      _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
        -:  775:	      this->_M_impl._M_finish =
        -:  776:		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
        -:  777:						 __n, _M_get_Tp_allocator());
        -:  778:	      _GLIBCXX_ASAN_ANNOTATE_GREW(__n);
        -:  779:	    }
        -:  780:	  else
        -:  781:	    {
        -:  782:	      // Make local copies of these members because the compiler thinks
        -:  783:	      // the allocator can alter them if 'this' is globally reachable.
        -:  784:	      pointer __old_start = this->_M_impl._M_start;
        -:  785:	      pointer __old_finish = this->_M_impl._M_finish;
        -:  786:
        -:  787:	      const size_type __len =
        -:  788:		_M_check_len(__n, "vector::_M_default_append");
        -:  789:	      pointer __new_start(this->_M_allocate(__len));
        -:  790:
        -:  791:	      {
        -:  792:		_Guard_alloc __guard(__new_start, __len, *this);
        -:  793:
        -:  794:		std::__uninitialized_default_n_a(__new_start + __size, __n,
        -:  795:						 _M_get_Tp_allocator());
        -:  796:
        -:  797:		if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
        -:  798:		  {
        -:  799:		    _S_relocate(__old_start, __old_finish,
        -:  800:				__new_start, _M_get_Tp_allocator());
        -:  801:		  }
        -:  802:		else
        -:  803:		  {
        -:  804:		    // RAII type to destroy initialized elements.
        -:  805:		    struct _Guard_elts
        -:  806:		    {
        -:  807:		      pointer _M_first, _M_last;  // Elements to destroy
        -:  808:		      _Tp_alloc_type& _M_alloc;
        -:  809:
        -:  810:		      _GLIBCXX20_CONSTEXPR
        -:  811:		      _Guard_elts(pointer __first, size_type __n,
        -:  812:				  _Tp_alloc_type& __a)
        -:  813:		      : _M_first(__first), _M_last(__first + __n), _M_alloc(__a)
        -:  814:		      { }
        -:  815:
        -:  816:		      _GLIBCXX20_CONSTEXPR
        -:  817:		      ~_Guard_elts()
        -:  818:		      { std::_Destroy(_M_first, _M_last, _M_alloc); }
        -:  819:
        -:  820:		    private:
        -:  821:		      _Guard_elts(const _Guard_elts&);
        -:  822:		    };
        -:  823:		    _Guard_elts __guard_elts(__new_start + __size, __n, _M_impl);
        -:  824:
        -:  825:		    std::__uninitialized_move_if_noexcept_a(
        -:  826:		      __old_start, __old_finish, __new_start,
        -:  827:		      _M_get_Tp_allocator());
        -:  828:
        -:  829:		    __guard_elts._M_first = __old_start;
        -:  830:		    __guard_elts._M_last = __old_finish;
        -:  831:		  }
        -:  832:		_GLIBCXX_ASAN_ANNOTATE_REINIT;
        -:  833:		__guard._M_storage = __old_start;
        -:  834:		__guard._M_len = this->_M_impl._M_end_of_storage - __old_start;
        -:  835:	      }
        -:  836:	      // deallocate should be called before assignments to _M_impl,
        -:  837:	      // to avoid call-clobbering
        -:  838:
        -:  839:	      this->_M_impl._M_start = __new_start;
        -:  840:	      this->_M_impl._M_finish = __new_start + __size + __n;
        -:  841:	      this->_M_impl._M_end_of_storage = __new_start + __len;
        -:  842:	    }
        -:  843:	}
        -:  844:    }
        -:  845:
        -:  846:  template<typename _Tp, typename _Alloc>
        -:  847:    _GLIBCXX20_CONSTEXPR
        -:  848:    bool
        -:  849:    vector<_Tp, _Alloc>::
        -:  850:    _M_shrink_to_fit()
        -:  851:    {
        -:  852:      if (capacity() == size())
        -:  853:	return false;
        -:  854:      _GLIBCXX_ASAN_ANNOTATE_REINIT;
        -:  855:      return std::__shrink_to_fit_aux<vector>::_S_do_it(*this);
        -:  856:    }
        -:  857:#endif
        -:  858:
        -:  859:  template<typename _Tp, typename _Alloc>
        -:  860:    template<typename _InputIterator>
        -:  861:      _GLIBCXX20_CONSTEXPR
        -:  862:      void
        -:  863:      vector<_Tp, _Alloc>::
        -:  864:      _M_range_insert(iterator __pos, _InputIterator __first,
        -:  865:		      _InputIterator __last, std::input_iterator_tag)
        -:  866:      {
        -:  867:	if (__pos == end())
        -:  868:	  {
        -:  869:	    for (; __first != __last; ++__first)
        -:  870:	      insert(end(), *__first);
        -:  871:	  }
        -:  872:	else if (__first != __last)
        -:  873:	  {
        -:  874:	    vector __tmp(__first, __last, _M_get_Tp_allocator());
        -:  875:	    insert(__pos,
        -:  876:		   _GLIBCXX_MAKE_MOVE_ITERATOR(__tmp.begin()),
        -:  877:		   _GLIBCXX_MAKE_MOVE_ITERATOR(__tmp.end()));
        -:  878:	  }
        -:  879:      }
        -:  880:
        -:  881:  template<typename _Tp, typename _Alloc>
        -:  882:    template<typename _ForwardIterator>
        -:  883:      _GLIBCXX20_CONSTEXPR
        -:  884:      void
        -:  885:      vector<_Tp, _Alloc>::
        -:  886:      _M_range_insert(iterator __position, _ForwardIterator __first,
        -:  887:		      _ForwardIterator __last, std::forward_iterator_tag)
        -:  888:      {
        -:  889:	if (__first != __last)
        -:  890:	  {
        -:  891:	    const size_type __n = std::distance(__first, __last);
        -:  892:	    if (size_type(this->_M_impl._M_end_of_storage
        -:  893:			  - this->_M_impl._M_finish) >= __n)
        -:  894:	      {
        -:  895:		const size_type __elems_after = end() - __position;
        -:  896:		pointer __old_finish(this->_M_impl._M_finish);
        -:  897:		if (__elems_after > __n)
        -:  898:		  {
        -:  899:		    _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
        -:  900:		    std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
        -:  901:						this->_M_impl._M_finish,
        -:  902:						this->_M_impl._M_finish,
        -:  903:						_M_get_Tp_allocator());
        -:  904:		    this->_M_impl._M_finish += __n;
        -:  905:		    _GLIBCXX_ASAN_ANNOTATE_GREW(__n);
        -:  906:		    _GLIBCXX_MOVE_BACKWARD3(__position.base(),
        -:  907:					    __old_finish - __n, __old_finish);
        -:  908:		    std::copy(__first, __last, __position);
        -:  909:		  }
        -:  910:		else
        -:  911:		  {
        -:  912:		    _ForwardIterator __mid = __first;
        -:  913:		    std::advance(__mid, __elems_after);
        -:  914:		    _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
        -:  915:		    std::__uninitialized_copy_a(__mid, __last,
        -:  916:						this->_M_impl._M_finish,
        -:  917:						_M_get_Tp_allocator());
        -:  918:		    this->_M_impl._M_finish += __n - __elems_after;
        -:  919:		    _GLIBCXX_ASAN_ANNOTATE_GREW(__n - __elems_after);
        -:  920:		    std::__uninitialized_move_a(__position.base(),
        -:  921:						__old_finish,
        -:  922:						this->_M_impl._M_finish,
        -:  923:						_M_get_Tp_allocator());
        -:  924:		    this->_M_impl._M_finish += __elems_after;
        -:  925:		    _GLIBCXX_ASAN_ANNOTATE_GREW(__elems_after);
        -:  926:		    std::copy(__first, __mid, __position);
        -:  927:		  }
        -:  928:	      }
        -:  929:	    else
        -:  930:	      {
        -:  931:		// Make local copies of these members because the compiler
        -:  932:		// thinks the allocator can alter them if 'this' is globally
        -:  933:		// reachable.
        -:  934:		pointer __old_start = this->_M_impl._M_start;
        -:  935:		pointer __old_finish = this->_M_impl._M_finish;
        -:  936:
        -:  937:		const size_type __len =
        -:  938:		  _M_check_len(__n, "vector::_M_range_insert");
        -:  939:#if __cplusplus < 201103L
        -:  940:		if (__len < (__n + (__old_finish - __old_start)))
        -:  941:		  __builtin_unreachable();
        -:  942:#endif
        -:  943:
        -:  944:		pointer __new_start(this->_M_allocate(__len));
        -:  945:		pointer __new_finish(__new_start);
        -:  946:		__try
        -:  947:		  {
        -:  948:		    __new_finish
        -:  949:		      = std::__uninitialized_move_if_noexcept_a
        -:  950:		      (__old_start, __position.base(),
        -:  951:		       __new_start, _M_get_Tp_allocator());
        -:  952:		    __new_finish
        -:  953:		      = std::__uninitialized_copy_a(__first, __last,
        -:  954:						    __new_finish,
        -:  955:						    _M_get_Tp_allocator());
        -:  956:		    __new_finish
        -:  957:		      = std::__uninitialized_move_if_noexcept_a
        -:  958:		      (__position.base(), __old_finish,
        -:  959:		       __new_finish, _M_get_Tp_allocator());
        -:  960:		  }
        -:  961:		__catch(...)
        -:  962:		  {
        -:  963:		    std::_Destroy(__new_start, __new_finish,
        -:  964:				  _M_get_Tp_allocator());
        -:  965:		    _M_deallocate(__new_start, __len);
        -:  966:		    __throw_exception_again;
        -:  967:		  }
        -:  968:		std::_Destroy(__old_start, __old_finish,
        -:  969:			      _M_get_Tp_allocator());
        -:  970:		_GLIBCXX_ASAN_ANNOTATE_REINIT;
        -:  971:		_M_deallocate(__old_start,
        -:  972:			      this->_M_impl._M_end_of_storage - __old_start);
        -:  973:		this->_M_impl._M_start = __new_start;
        -:  974:		this->_M_impl._M_finish = __new_finish;
        -:  975:		this->_M_impl._M_end_of_storage = __new_start + __len;
        -:  976:	      }
        -:  977:	  }
        -:  978:      }
        -:  979:
        -:  980:#if __glibcxx_containers_ranges // C++ >= 23
        -:  981:  template<typename _Tp, typename _Alloc>
        -:  982:    template<__detail::__container_compatible_range<_Tp> _Rg>
        -:  983:      constexpr auto
        -:  984:      vector<_Tp, _Alloc>::
        -:  985:      insert_range(const_iterator __pos, _Rg&& __rg)
        -:  986:      -> iterator
        -:  987:      {
        -:  988:	if (__pos == cend())
        -:  989:	  {
        -:  990:	    const auto __ins_idx = size();
        -:  991:	    append_range(std::forward<_Rg>(__rg));
        -:  992:	    return begin() + __ins_idx;
        -:  993:	  }
        -:  994:
        -:  995:	if constexpr (ranges::forward_range<_Rg>)
        -:  996:	  {
        -:  997:	    // Start of existing elements:
        -:  998:	    pointer __old_start = this->_M_impl._M_start;
        -:  999:	    // End of existing elements:
        -: 1000:	    pointer __old_finish = this->_M_impl._M_finish;
        -: 1001:	    // Insertion point:
        -: 1002:	    const auto __ins_idx = __pos - cbegin();
        -: 1003:	    pointer __ins = __old_start + __ins_idx;
        -: 1004:	    // Number of new elements to insert:
        -: 1005:	    const auto __n = size_type(ranges::distance(__rg));
        -: 1006:	    // Number of elements that can fit in unused capacity:
        -: 1007:	    const auto __cap = this->_M_impl._M_end_of_storage - __old_finish;
        -: 1008:	    if (__cap >= __n)
        -: 1009:	      {
        -: 1010:		// Number of existing elements after insertion point:
        -: 1011:		const size_type __elems_after = cend() - __pos;
        -: 1012:		if (__elems_after > __n)
        -: 1013:		  {
        -: 1014:		    _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
        -: 1015:		    std::__uninitialized_move_a(__old_finish - __n,
        -: 1016:						__old_finish,
        -: 1017:						__old_finish,
        -: 1018:						_M_get_Tp_allocator());
        -: 1019:		    this->_M_impl._M_finish += __n;
        -: 1020:		    _GLIBCXX_ASAN_ANNOTATE_GREW(__n);
        -: 1021:		    std::move_backward(__ins, __old_finish - __n, __old_finish);
        -: 1022:		    ranges::copy(__rg, __ins);
        -: 1023:		  }
        -: 1024:		else
        -: 1025:		  {
        -: 1026:		    auto __first = ranges::begin(__rg);
        -: 1027:		    const auto __last = ranges::end(__rg);
        -: 1028:		    auto __mid = ranges::next(__first, __elems_after);
        -: 1029:		    _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
        -: 1030:		    _Base::_M_append_range(ranges::subrange(__mid, __last));
        -: 1031:		    _GLIBCXX_ASAN_ANNOTATE_GREW(__n - __elems_after);
        -: 1032:		    std::__uninitialized_move_a(__ins, __old_finish,
        -: 1033:						this->_M_impl._M_finish,
        -: 1034:						_M_get_Tp_allocator());
        -: 1035:		    this->_M_impl._M_finish += __elems_after;
        -: 1036:		    _GLIBCXX_ASAN_ANNOTATE_GREW(__elems_after);
        -: 1037:		    ranges::copy(__first, __mid, __ins);
        -: 1038:		  }
        -: 1039:	      }
        -: 1040:	    else // Reallocate
        -: 1041:	      {
        -: 1042:		const size_type __len
        -: 1043:		  = _M_check_len(__n, "vector::insert_range");
        -: 1044:
        -: 1045:		struct _Guard : _Guard_alloc
        -: 1046:		{
        -: 1047:		  // End of elements to destroy:
        -: 1048:		  pointer _M_finish = _Guard_alloc::_M_storage;
        -: 1049:
        -: 1050:		  using _Guard_alloc::_Guard_alloc;
        -: 1051:
        -: 1052:		  constexpr
        -: 1053:		  ~_Guard()
        -: 1054:		  {
        -: 1055:		    std::_Destroy(this->_M_storage, _M_finish,
        -: 1056:				  this->_M_vect._M_get_Tp_allocator());
        -: 1057:		  }
        -: 1058:		};
        -: 1059:
        -: 1060:		// Allocate new storage:
        -: 1061:		pointer __new_start(this->_M_allocate(__len));
        -: 1062:		_Guard __guard(__new_start, __len, *this);
        -: 1063:
        -: 1064:		auto& __alloc = _M_get_Tp_allocator();
        -: 1065:
        -: 1066:		// Populate the new storage in three steps. After each step,
        -: 1067:		// __guard owns the new storage and any elements that have
        -: 1068:		// been constructed there.
        -: 1069:
        -: 1070:		// Move elements from before insertion point to new storage:
        -: 1071:		__guard._M_finish
        -: 1072:		  = std::__uninitialized_move_if_noexcept_a(
        -: 1073:		      __old_start, __ins, __new_start, __alloc);
        -: 1074:
        -: 1075:		// Append new elements to new storage:
        -: 1076:		_Base::_M_append_range_to(__rg, __guard._M_finish);
        -: 1077:
        -: 1078:		// Move elements from after insertion point to new storage:
        -: 1079:		__guard._M_finish
        -: 1080:		    = std::__uninitialized_move_if_noexcept_a(
        -: 1081:			__ins, __old_finish, __guard._M_finish, __alloc);
        -: 1082:
        -: 1083:		_GLIBCXX_ASAN_ANNOTATE_REINIT; // Creates _Asan::_Reinit.
        -: 1084:
        -: 1085:		// All elements are in the new storage, exchange ownership
        -: 1086:		// with __guard so that it cleans up the old storage:
        -: 1087:		this->_M_impl._M_start = __guard._M_storage;
        -: 1088:		this->_M_impl._M_finish = __guard._M_finish;
        -: 1089:		this->_M_impl._M_end_of_storage = __new_start + __len;
        -: 1090:		__guard._M_storage = __old_start;
        -: 1091:		__guard._M_finish = __old_finish;
        -: 1092:		__guard._M_len = (__old_finish - __old_start) + __cap;
        -: 1093:		// _Asan::_Reinit destructor marks unused capacity.
        -: 1094:		// _Guard destructor destroys [old_start,old_finish).
        -: 1095:		// _Guard_alloc destructor frees [old_start,old_start+len).
        -: 1096:	      }
        -: 1097:	    return begin() + __ins_idx;
        -: 1098:	  }
        -: 1099:	else
        -: 1100:	  return insert_range(__pos, vector(from_range, std::forward<_Rg>(__rg),
        -: 1101:					    _M_get_Tp_allocator()));
        -: 1102:      }
        -: 1103:#endif // containers_ranges
        -: 1104:
        -: 1105:  // vector<bool>
        -: 1106:  template<typename _Alloc>
        -: 1107:    _GLIBCXX20_CONSTEXPR
        -: 1108:    void
        -: 1109:    vector<bool, _Alloc>::
        -: 1110:    _M_reallocate(size_type __n)
        -: 1111:    {
        -: 1112:      const iterator __begin = begin(), __end = end();
        -: 1113:      if (size_type(__end - __begin) > __n)
        -: 1114:	__builtin_unreachable();
        -: 1115:      _Bit_pointer __q = this->_M_allocate(__n);
        -: 1116:      iterator __start(std::__addressof(*__q), 0);
        -: 1117:      iterator __finish(_M_copy_aligned(__begin, __end, __start));
        -: 1118:      this->_M_deallocate();
        -: 1119:      this->_M_impl._M_start = __start;
        -: 1120:      this->_M_impl._M_finish = __finish;
        -: 1121:      this->_M_impl._M_end_of_storage = __q + _S_nword(__n);
        -: 1122:    }
        -: 1123:
        -: 1124:  template<typename _Alloc>
        -: 1125:    _GLIBCXX20_CONSTEXPR
        -: 1126:    void
        -: 1127:    vector<bool, _Alloc>::
        -: 1128:    _M_fill_insert(iterator __position, size_type __n, bool __x)
        -: 1129:    {
        -: 1130:      if (__n == 0)
        -: 1131:	return;
        -: 1132:      if (capacity() - size() >= __n)
        -: 1133:	{
        -: 1134:	  std::copy_backward(__position, end(),
        -: 1135:			     this->_M_impl._M_finish + difference_type(__n));
        -: 1136:	  std::fill(__position, __position + difference_type(__n), __x);
        -: 1137:	  this->_M_impl._M_finish += difference_type(__n);
        -: 1138:	}
        -: 1139:      else
        -: 1140:	{
        -: 1141:	  const size_type __len = 
        -: 1142:	    _M_check_len(__n, "vector<bool>::_M_fill_insert");
        -: 1143:	  iterator __begin = begin(), __end = end();
        -: 1144:	  _Bit_pointer __q = this->_M_allocate(__len);
        -: 1145:	  iterator __start(std::__addressof(*__q), 0);
        -: 1146:	  iterator __i = _M_copy_aligned(__begin, __position, __start);
        -: 1147:	  std::fill(__i, __i + difference_type(__n), __x);
        -: 1148:	  iterator __finish = std::copy(__position, __end,
        -: 1149:					__i + difference_type(__n));
        -: 1150:	  this->_M_deallocate();
        -: 1151:	  this->_M_impl._M_end_of_storage = __q + _S_nword(__len);
        -: 1152:	  this->_M_impl._M_start = __start;
        -: 1153:	  this->_M_impl._M_finish = __finish;
        -: 1154:	}
        -: 1155:    }
        -: 1156:
        -: 1157:  template<typename _Alloc>
        -: 1158:    template<typename _ForwardIterator>
        -: 1159:      _GLIBCXX20_CONSTEXPR
        -: 1160:      void
        -: 1161:      vector<bool, _Alloc>::
        -: 1162:      _M_insert_range(iterator __position, _ForwardIterator __first, 
        -: 1163:		      _ForwardIterator __last, std::forward_iterator_tag)
        -: 1164:      {
        -: 1165:	if (__first != __last)
        -: 1166:	  {
        -: 1167:	    size_type __n = std::distance(__first, __last);
        -: 1168:	    if (capacity() - size() >= __n)
        -: 1169:	      {
        -: 1170:		std::copy_backward(__position, end(),
        -: 1171:				   this->_M_impl._M_finish
        -: 1172:				   + difference_type(__n));
        -: 1173:		std::copy(__first, __last, __position);
        -: 1174:		this->_M_impl._M_finish += difference_type(__n);
        -: 1175:	      }
        -: 1176:	    else
        -: 1177:	      {
        -: 1178:		const size_type __len =
        -: 1179:		  _M_check_len(__n, "vector<bool>::_M_insert_range");
        -: 1180:		const iterator __begin = begin(), __end = end();
        -: 1181:		_Bit_pointer __q = this->_M_allocate(__len);
        -: 1182:		iterator __start(std::__addressof(*__q), 0);
        -: 1183:		iterator __i = _M_copy_aligned(__begin, __position, __start);
        -: 1184:		__i = std::copy(__first, __last, __i);
        -: 1185:		iterator __finish = std::copy(__position, __end, __i);
        -: 1186:		this->_M_deallocate();
        -: 1187:		this->_M_impl._M_end_of_storage = __q + _S_nword(__len);
        -: 1188:		this->_M_impl._M_start = __start;
        -: 1189:		this->_M_impl._M_finish = __finish;
        -: 1190:	      }
        -: 1191:	  }
        -: 1192:      }
        -: 1193:
        -: 1194:  template<typename _Alloc>
        -: 1195:    _GLIBCXX20_CONSTEXPR
        -: 1196:    void
        -: 1197:    vector<bool, _Alloc>::
        -: 1198:    _M_insert_aux(iterator __position, bool __x)
        -: 1199:    {
        -: 1200:      if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_addr())
        -: 1201:	{
        -: 1202:	  std::copy_backward(__position, this->_M_impl._M_finish, 
        -: 1203:			     this->_M_impl._M_finish + 1);
        -: 1204:	  *__position = __x;
        -: 1205:	  ++this->_M_impl._M_finish;
        -: 1206:	}
        -: 1207:      else
        -: 1208:	{
        -: 1209:	  const size_type __len =
        -: 1210:	    _M_check_len(size_type(1), "vector<bool>::_M_insert_aux");
        -: 1211:	  _Bit_pointer __q = this->_M_allocate(__len);
        -: 1212:	  iterator __start(std::__addressof(*__q), 0);
        -: 1213:	  iterator __i = _M_copy_aligned(begin(), __position, __start);
        -: 1214:	  *__i++ = __x;
        -: 1215:	  iterator __finish = std::copy(__position, end(), __i);
        -: 1216:	  this->_M_deallocate();
        -: 1217:	  this->_M_impl._M_end_of_storage = __q + _S_nword(__len);
        -: 1218:	  this->_M_impl._M_start = __start;
        -: 1219:	  this->_M_impl._M_finish = __finish;
        -: 1220:	}
        -: 1221:    }
        -: 1222:
        -: 1223:  template<typename _Alloc>
        -: 1224:    _GLIBCXX20_CONSTEXPR
        -: 1225:    typename vector<bool, _Alloc>::iterator
        -: 1226:    vector<bool, _Alloc>::
        -: 1227:    _M_erase(iterator __position)
        -: 1228:    {
        -: 1229:      if (__position + 1 != end())
        -: 1230:        std::copy(__position + 1, end(), __position);
        -: 1231:      --this->_M_impl._M_finish;
        -: 1232:      return __position;
        -: 1233:    }
        -: 1234:
        -: 1235:  template<typename _Alloc>
        -: 1236:    _GLIBCXX20_CONSTEXPR
        -: 1237:    typename vector<bool, _Alloc>::iterator
        -: 1238:    vector<bool, _Alloc>::
        -: 1239:    _M_erase(iterator __first, iterator __last)
        -: 1240:    {
        -: 1241:      if (__first != __last)
        -: 1242:	_M_erase_at_end(std::copy(__last, end(), __first));
        -: 1243:      return __first;
        -: 1244:    }
        -: 1245:
        -: 1246:#if __cplusplus >= 201103L
        -: 1247:  template<typename _Alloc>
        -: 1248:    _GLIBCXX20_CONSTEXPR
        -: 1249:    bool
        -: 1250:    vector<bool, _Alloc>::
        -: 1251:    _M_shrink_to_fit()
        -: 1252:    {
        -: 1253:      if (capacity() - size() < int(_S_word_bit))
        -: 1254:	return false;
        -: 1255:      __try
        -: 1256:	{
        -: 1257:	  if (size_type __n = size())
        -: 1258:	    _M_reallocate(__n);
        -: 1259:	  else
        -: 1260:	    {
        -: 1261:	      this->_M_deallocate();
        -: 1262:	      this->_M_impl._M_reset();
        -: 1263:	    }
        -: 1264:	  return true;
        -: 1265:	}
        -: 1266:      __catch(...)
        -: 1267:	{ return false; }
        -: 1268:    }
        -: 1269:#endif
        -: 1270:
        -: 1271:_GLIBCXX_END_NAMESPACE_CONTAINER
        -: 1272:_GLIBCXX_END_NAMESPACE_VERSION
        -: 1273:} // namespace std
        -: 1274:
        -: 1275:#if __cplusplus >= 201103L
        -: 1276:
        -: 1277:namespace std _GLIBCXX_VISIBILITY(default)
        -: 1278:{
        -: 1279:_GLIBCXX_BEGIN_NAMESPACE_VERSION
        -: 1280:
        -: 1281:  template<typename _Alloc>
        -: 1282:    size_t
        -: 1283:    hash<_GLIBCXX_STD_C::vector<bool, _Alloc>>::
        -: 1284:    operator()(const _GLIBCXX_STD_C::vector<bool, _Alloc>& __b) const noexcept
        -: 1285:    {
        -: 1286:      size_t __hash = 0;
        -: 1287:      const size_t __words = __b.size() / _S_word_bit;
        -: 1288:      if (__words)
        -: 1289:	{
        -: 1290:	  const size_t __clength = __words * sizeof(_Bit_type);
        -: 1291:	  __hash = std::_Hash_impl::hash(__b._M_impl._M_start._M_p, __clength);
        -: 1292:	}
        -: 1293:
        -: 1294:      const size_t __extrabits = __b.size() % _S_word_bit;
        -: 1295:      if (__extrabits)
        -: 1296:	{
        -: 1297:	  _Bit_type __hiword = *__b._M_impl._M_finish._M_p;
        -: 1298:	  __hiword &= ~((~static_cast<_Bit_type>(0)) << __extrabits);
        -: 1299:
        -: 1300:	  const size_t __clength
        -: 1301:	    = (__extrabits + __CHAR_BIT__ - 1) / __CHAR_BIT__;
        -: 1302:	  if (__words)
        -: 1303:	    __hash = std::_Hash_impl::hash(&__hiword, __clength, __hash);
        -: 1304:	  else
        -: 1305:	    __hash = std::_Hash_impl::hash(&__hiword, __clength);
        -: 1306:	}
        -: 1307:
        -: 1308:      return __hash;
        -: 1309:    }
        -: 1310:
        -: 1311:_GLIBCXX_END_NAMESPACE_VERSION
        -: 1312:} // namespace std
        -: 1313:
        -: 1314:#endif // C++11
        -: 1315:
        -: 1316:#undef _GLIBCXX_ASAN_ANNOTATE_REINIT
        -: 1317:#undef _GLIBCXX_ASAN_ANNOTATE_GROW
        -: 1318:#undef _GLIBCXX_ASAN_ANNOTATE_GREW
        -: 1319:#undef _GLIBCXX_ASAN_ANNOTATE_SHRINK
        -: 1320:
        -: 1321:#endif /* _VECTOR_TCC */
