# Aimatix - M5Stack Fire 集中タイマー プロジェクト

## 設計原則

### アーキテクチャ設計
- **責務の明確な分離**: 各ファイルは単一の責務を持つ
  - `main.cpp`: 全体制御、モード管理、画面遷移制御
  - `input.cpp`: 入力処理専用（ボタン判定、時刻入力）
  - `ui.cpp`: UI描画専用（画面表示、レイアウト）
  - `alarm.cpp`: アラーム機能（時刻管理、鳴動制御）
  - `settings.cpp`: 設定管理（保存・読み込み）

### ボタン管理設計
- **統一されたボタン管理システム**: 将来的な拡張性を考慮
  - 長押し/短押し判定の一元管理
  - 同時押し、シーケンス操作への対応
  - 各画面は純粋な画面遷移ロジックのみ実装

### デバウンス管理設計
- **階層化されたデバウンス処理**:
  - ハードウェアレベル: ButtonManager (50ms) - 物理的なチャタリング対策
  - 操作レベル: 各画面 (200ms) - 意図しない操作の防止
  - 画面遷移レベル: ModeManager (300ms) - モード切り替えの安定性

### UI/UX設計
- **Amber CRTテーマ**: 黒/ダークグレー背景、アンバー文字、オレンジ警告
- **フォント階層**: Font7（主要）、Font4（補助）、Font2（ヒント）
- **グリッドレイアウト**: 一貫した画面構成
- **データ永続化**: SSID/パスワード、LCD明度、音/振動設定をフラッシュ保存

## 開発フロー（AI Agent必須遵守）

### カバレッジ計測フロー
- **開発中**: `python scripts/test_coverage.py --quick` (1-2分、軽量)
- **機能完成時**: `python scripts/test_coverage.py --full` (5-10分、詳細)
- **リリース前**: `python scripts/test_coverage.py --release` (10-15分、厳格)

### 品質保証フロー
- **開発開始時**: ベースライン計測、環境確認
- **開発中**: 継続的カバレッジ監視、変更ファイル計測
- **機能完成時**: 完全計測、品質ゲート確認
- **リリース前**: リリース品質チェック、履歴記録

### 開発サイクル統合
1. **機能開発開始**: `python scripts/test_coverage.py --baseline`
2. **開発中継続監視**: `python scripts/test_coverage.py --quick --watch`
3. **機能完成時品質確認**: `python scripts/test_coverage.py --full`
4. **リリース前最終確認**: `python scripts/test_coverage.py --release --strict`

### AI Agent品質チェック
- **コード変更時**: 必ずカバレッジ計測を実行
- **新機能追加時**: 対応するテストケースの追加
- **バグ修正時**: 修正内容のテストカバレッジ確認
- **リファクタリング時**: 既存テストの動作確認

## コーディング規約

### 命名規則
- **関数名**: 英語、動詞+名詞（例: `handleDigitEditInput`, `drawMainDisplay`）
- **変数名**: 英語、キャメルケース（例: `currentMode`, `lastModeChange`）
- **定数名**: 英語、大文字+アンダースコア（例: `LONG_PRESS_TIME`, `DEBOUNCE_TIME`）
- **クラス名**: 英語、パスカルケース（例: `ButtonManager`, `InputState`）

### コメント規約
- **日本語コメント**: 機能説明、設計意図の説明
- **英語コメント**: 技術的な詳細、API仕様
- **関数ヘッダー**: 機能、引数、戻り値、使用例を記載

### ファイル構成
- **ヘッダーファイル**: 型定義、関数宣言、定数定義
- **ソースファイル**: 実装、ロジック、処理
- **インクルード順序**: 標準ライブラリ → 外部ライブラリ → プロジェクト内

### エラーハンドリング
- **バリデーション**: 入力値の妥当性チェック
- **境界値チェック**: 配列インデックス、時刻範囲
- **デバッグ出力**: Serial出力で動作確認（本番時は削除）

## 開発方針

### 段階的実装
- **基本機能**: 時刻表示、アラーム設定
- **拡張機能**: 相対時刻、設定メニュー
- **最適化**: パフォーマンス、UI改善

### テスト方針
- **実機テスト**: M5Stack Fireでの動作確認
- **デバッグ機能**: シリアル出力、警告色テスト
- **ユーザビリティ**: 直感的な操作、視認性

### 保守性
- **モジュール化**: 機能ごとの分離
- **設定の外部化**: 定数、設定値の集約
- **ドキュメント**: 設計意図、使用方法の記録

## 品質保証基準

### カバレッジ目標
- **Unit Testカバレッジ**: 85%以上
- **統合テストカバレッジ**: 95%以上
- **実機テスト**: 基本動作確認のみ

### 品質ゲート
- **開発中**: 70%カバレッジ（警告）
- **リリース前**: 80%カバレッジ（必須）
- **厳格モード**: 85%カバレッジ（推奨）

### パフォーマンス目標
- **メインループ**: 100Hz維持
- **RAM使用量**: 0.5%以下
- **Flash使用量**: 10%以下
- **バッテリー持続時間**: 8時間以上

## 注意事項

### 現在の問題点
- ボタン管理の分散（main.cppとinput.cppで重複）
- デバウンス処理の重複
- 長押し/短押し判定の不統一

### 改善方針
- 統一されたButtonManagerクラスの導入
- 階層化されたデバウンス管理システム
- 責務の明確な分離

### 将来の拡張
- AB同時押し、ABC同時押しへの対応
- シーケンス操作、連続押し判定
- より複雑なボタン操作パターン 