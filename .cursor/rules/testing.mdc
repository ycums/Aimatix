# テスト戦略

## テスト環境構成

### Native環境（Unit Test）
- **目的**: 純粋ロジックの単体テスト
- **環境**: Windows native環境
- **フレームワーク**: Unity
- **対象**: `lib/libaimatix/src/`配下の純粋ロジック

### M5Stack環境（統合テスト）
- **目的**: ハードウェア連携の統合テスト
- **環境**: M5Stack Fire実機
- **フレームワーク**: Unity
- **対象**: 全機能の統合動作

## テスト実行方法

### 基本的なテスト実行
```bash
# 全テスト実行
pio test -e native

# 特定テスト実行
pio test -e native -f pure/test_button_manager_pure

# デバッグ出力付き（printf デバッグ用）
pio test -e native -f pure/test_alarm_display_pure -v
```

### テストカバレッジ測定
```bash
# カバレッジ測定
python scripts/test_coverage.py
```

### 静的解析実行
```bash
# 静的解析実行
pio check -e native

# 特定の重要度の警告のみ表示
pio check -e native --severity=high

# 詳細な結果を表示
pio check -e native --verbose
```

## テストディレクトリ構造

```
test/
├── pure/                          # 純粋ロジックテスト
│   ├── test_button_manager_pure/
│   │   ├── test_main.cpp
│   │   ├── mock_button_manager.h/.cpp
│   │   └── mock_time.h
│   ├── test_alarm_logic_pure/
│   │   └── test_main.cpp
│   ├── test_debounce_manager_pure/
│   │   └── test_main.cpp
│   ├── test_input_logic_pure/
│   │   └── test_main.cpp
│   ├── test_settings_logic_pure/
│   │   └── test_main.cpp
│   └── test_time_logic_simple/
│       └── test_main.cpp
├── mock/                          # 共通モック
│   ├── mock_button_manager.h/.cpp
│   ├── mock_m5stack.h
│   └── mock_time.h
├── integration/                   # 統合テスト（未使用）
│   └── test_integration.cpp
└── unity_config.h                 # Unity設定
```

## テスト戦略の基本方針

### テストの目的
- **品質保証**: 機能の正確性、信頼性の確保
- **回帰防止**: 既存機能の破壊を防止
- **開発効率**: 早期バグ発見による開発効率向上
- **保守性**: コード変更時の安全性確保

### テストの原則
- **自動化**: 可能な限りテストを自動化
- **早期実行**: 開発サイクルの早期にテスト実行
- **継続的実行**: 継続的インテグレーションでの自動実行
- **カバレッジ**: 適切なテストカバレッジの維持

## テスト戦略の進化

### Phase 0.2: 基本戦略の確立
- **Unit Test**: 純粋ロジックの単体テスト
- **統合テスト**: モジュール間の連携テスト
- **実機テスト**: ハードウェア動作確認

### Phase 0.7: 実装改善
- **Unityライブラリ問題の解決**: カスタムテストフレームワークの実装
- **統合テスト環境の改善**: モック活用による統合テスト

## カバレッジ目標

詳細な品質ゲート基準については [品質ゲート基準](doc/operation/quality_gates.md) を参照してください。

- **Unit Test**: 85%以上
- **統合テスト**: 80%以上
- **実機テスト**: 基本動作確認のみ

## モック戦略

### モックの配置
- **複数テストで使う共通モック**: `test/mock/` に集約
- **テスト固有のmock**: `test/pure/`各ディレクトリ内に配置可

### モックの使用原則
- **ハードウェア依存の分離**: モックを使用してハードウェア依存を分離
- **純粋ロジックのテスト**: 純粋ロジックのみをテスト対象とする
- **インターフェースベース**: インターフェースを介したモック実装

## テスト実行の注意点

### printf デバッグ
- printf デバッグを行うときは `-v` オプションが必要
- 例: `pio test -e native -f pure/test_alarm_display_pure -v`

### テスト環境の選択
- **Native環境**: 純粋ロジックの単体テスト
- **M5Stack環境**: ハードウェア連携の統合テスト
- **ESP32環境**: ESP32固有の機能テスト
---
description: テスト戦略と実行方法
globs: ["test/**/*", "**/*test*"]
alwaysApply: false
---
