# テスト作成ガイドライン

## 基本原則

### 1. 分岐カバレッジ優先
- **目標**: public関数の分岐カバレッジ向上
- **波及効果**: private関数も自然にカバーされる
- **効率性**: 1つのテストで複数の関数をカバー

### 2. 段階的テスト追加
```
1. テスト追加 → カバレッジ測定
2. 効果あり → 保持
3. 効果なし → 即座削除
4. 次の関数に移行
```

### 3. 避けるべき無駄なテスト
- ❌ private関数の直接テスト
- ❌ 既に十分カバーされている関数の追加テスト
- ❌ 効果のない分岐テスト

## テスト作成パターン

### 効果的なテスト例
```cpp
// 分岐カバレッジ向上テスト（+0.6%改善）
void test_display_common_null_pointer_branches() {
    // nullptr分岐のテスト
    drawButtonHintsGrid(mockDisplay.get(), nullptr, nullptr, nullptr);
    TEST_ASSERT_EQUAL(0, mockDisplay->drawTextCallCount);
    
    // 充電状態分岐のテスト
    drawTitleBar(mockDisplay.get(), "TEST", 50, true);
    TEST_ASSERT_TRUE(mockDisplay->lastDrawText.find("CHG") != std::string::npos);
}
```

### 無駄なテスト例
```cpp
// 削除すべき無駄なテスト（0.0%変動）
void test_input_display_state_ondraw_comprehensive() {
    state.onDraw(); // 既に十分カバーされている
    TEST_ASSERT_TRUE(true); // 効果なし
}
```

## モック作成ガイドライン

### 基本構造
```cpp
class MockDisplay : public IDisplay {
public:
    MockDisplay() : clearCalled(false), drawTextCallCount(0) {}
    
    void clear() override { clearCalled = true; }
    void drawText(int x, int y, const char* text, int fontSize) override { 
        drawTextCalled = true; 
        drawTextCallCount++;
    }
    
    // Test用フラグ
    bool clearCalled;
    bool drawTextCalled;
    int drawTextCallCount;
};
```

### 注意事項
- **C++11準拠**: `std::make_unique` は使用不可
- **スマートポインタ**: `std::unique_ptr(new ...)` を使用
- **Unity Framework**: `setUp()`, `tearDown()` が必要

## テスト実行コマンド

```bash
# 特定テスト実行
pio test -e native -f pure/test_input_display_pure

# 全テスト実行
pio test -e native

# カバレッジ測定
python scripts/test_coverage.py --quick
```

## 品質チェック

### テスト追加前
1. **カバレッジ測定**: 現在の状態を記録
2. **対象関数特定**: 分岐カバレッジが低い関数を選択
3. **テスト設計**: 分岐をカバーするテストケース作成

### テスト追加後
1. **カバレッジ測定**: 効果を確認
2. **効果判定**: 変動あり → 保持、変動なし → 削除
3. **次の関数**: 効率的に移行

## 参考ドキュメント

- [カバレッジ向上戦略](mdc:doc/project/coverage_strategy.md)
- [テスト戦略](mdc:doc/operation/testing_strategy.md)
- [品質ゲート基準](mdc:doc/operation/quality_gates.md)
description:
globs:
alwaysApply: false
---
