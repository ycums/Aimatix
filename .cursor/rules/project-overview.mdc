---
description: Aimatixプロジェクトの基本情報と開発原則
globs: ["**/*"]
alwaysApply: true
---

# Aimatix プロジェクト概要

## プロジェクト概要
- **M5Stackベースのアラーム時計ファームウェア**
- **PlatformIO + Unity テスト環境**
- **レイヤーアーキテクチャ + DIパターン**

## 重要な設計原則

### アーキテクチャ原則
- **純粋ロジックは `lib/libaimatix/src/` に配置**
- **M5Stack依存部は `src/` に配置**
- **テストは `test/pure/` から純粋ロジックのみをテスト**
- **ハードウェア依存はアダプターインターフェースで分離**
- **静的解析による品質保証**: Clang-Tidyによる継続的な品質チェック

### 開発環境
- **PlatformIO**: ビルドシステム
- **Unity**: テストフレームワーク
- **Clang-Tidy**: 静的解析
- **Visual Studio Code**: 推奨エディタ

### ディレクトリ構造
```
Aimatix/
├── lib/libaimatix/src/    # 純粋ロジック（ハード非依存）
├── src/                   # M5Stack依存の本体実装
├── test/pure/             # 純粋ロジックテスト
├── test/mock/             # 共通モック
├── doc/                   # ドキュメント
└── platformio.ini         # PlatformIO設定
```

## 開発フロー

### ビルド・テスト
```bash
# M5Stack Fire向けビルド
pio run -e m5stack-fire

# Native環境向けビルド（テスト用）
pio run -e native

# テスト実行
pio test -e native

# 特定テスト実行
pio test -e native -f pure/test_button_manager_pure
```

### 品質保証
- **テストカバレッジ**: 85%以上を目標
- **静的解析**: Clang-Tidyを使用（品質ゲート: 中重要度警告19件以下）
- **継続的テスト**: 開発サイクルに組み込み
- **コーディング規約**: 厳格なコーディング規約の遵守

## コーディング規約

### ファイル命名規則
- **クラス名をスネークケースに変換してファイル名とする**
- 例: `AlarmDisplayState` → `alarm_display_state.cpp`

### アーキテクチャ原則
- **純粋ロジックは Arduino.h を直接インポートしない**
- **ハードウェア依存はアダプターインターフェースで分離**
- **DIパターンを使用して依存性を注入**
- **静的メソッド宣言**: `static type ...();`形式を使用
- **重複分岐の統合**: 同じ処理を複数箇所で重複しない
- **疑わしいincludeの禁止**: `.cpp`ファイルの直接includeは禁止

### テスト原則
- **TDDアプローチ**: テストファースト
- **純粋ロジックのみをテスト対象とする**
- **モックを使用してハードウェア依存を分離**
