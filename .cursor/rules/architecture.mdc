---
description: アーキテクチャ設計とレイヤー構造
globs: ["lib/**/*", "src/**/*"]
alwaysApply: false
---

# アーキテクチャ設計

## レイヤーアーキテクチャ

### 全体構成
```
┌─────────────────────────────────────┐
│              UI Layer               │
│  (src/ui.cpp, src/main.cpp)        │
├─────────────────────────────────────┤
│           Business Logic            │
│    (lib/libaimatix/src/)           │
├─────────────────────────────────────┤
│         Hardware Adapters           │
│  (src/m5stack_adapters.cpp/h)      │
├─────────────────────────────────────┤
│           M5Stack Hardware          │
│     (M5Stack Library)              │
└─────────────────────────────────────┘
```

## レイヤー詳細

### UI Layer
**責務**:  
- ユーザーインターフェース、画面表示、ユーザー操作の受け付け
- 入力確定・設定保存イベントの受信と画面遷移・UI反映の制御
**ファイル**: `src/ui.cpp/h`, `src/main.cpp`
**依存**: Business Logic Layer

**主要コンポーネント**:
- **MainDisplay**: メイン画面の表示
- **InputDisplay**: 入力画面の表示
- **AlarmDisplay**: アラーム画面の表示
- **SettingsDisplay**: 設定画面の表示

### Business Logic Layer
**責務**:  
- 純粋ロジック、ビジネスルール、データ処理
- UI遷移や画面制御は一切行わず、必要な情報のみを返す
**ファイル**: `lib/libaimatix/src/`
**依存**: インターフェース（抽象）

**主要コンポーネント**:
- **TimeLogic**: 時刻計算、時間管理
- **AlarmLogic**: アラーム管理、鳴動制御
- **InputLogic**: 入力処理、バリデーション
- **SettingsLogic**: 設定管理、永続化
- **ButtonManager**: ボタン状態管理
- **DebounceManager**: デバウンス処理

### Hardware Adapters Layer
**責務**: ハードウェア抽象化、インターフェース実装
**ファイル**: `src/m5stack_adapters.cpp/h`
**依存**: M5Stack Hardware Layer

**主要コンポーネント**:
- **M5StackEEPROMAdapter**: EEPROMアクセス
- **M5StackSpeakerAdapter**: スピーカー制御
- **M5StackButtonManagerAdapter**: ボタン管理

## 設計原則

### 単一責任原則
- 各モジュールは単一の責任を持つ
- 明確な責務分離による保守性向上

### 依存性逆転原則
- 抽象に依存し、具象に依存しない
- インターフェースを介した疎結合設計

### 開放閉鎖原則
- 拡張に対して開いており、修正に対して閉じている
- 新機能追加時の既存コードへの影響を最小化

### インターフェース分離原則
- クライアントは使用しないインターフェースに依存しない
- 必要最小限のインターフェース設計

## DIパターン

### 依存性注入の実装
- **インターフェース定義**: 抽象的な依存関係を定義
- **実装分離**: 具象実装をインターフェースから分離
- **注入**: 実行時に適切な実装を注入

### 主要インターフェース
- **ITimeProvider**: 時間取得の抽象化
- **IDisplay**: 表示機能の抽象化
- **IButtonManager**: ボタン管理の抽象化
- **ISpeaker**: スピーカー制御の抽象化

## 責務分離の明確化

### UI層
- 入力確定・設定保存などのイベントを受けて、画面遷移やUI反映を制御
- ロジック層からの通知（戻り値やイベント）を受けて、必要なUI更新・状態遷移を行う

### ロジック層（InputLogic/SettingsLogic等）
- 値の検証・変換・保存などの純粋ロジックのみを担当
- UI遷移や画面制御は一切行わない
- UI層に通知すべき情報は戻り値や構造体、イベントで返す
