---
description:
globs:
alwaysApply: false
---

# プロジェクト構造と開発ガイドライン

## プロジェクト構造

### 主要ディレクトリ
- `lib/libaimatix/src/` - 純粋ロジック（テスト対象）
- `src/` - M5Stack依存実装（*Implクラス）
- `test/pure/` - 純粋ロジックのテスト
- `test/mock/` - モッククラス
- `doc/` - プロジェクトドキュメント

### アーキテクチャ原則
- **純粋ロジック**: `lib/libaimatix/src/` に配置
- **実装クラス**: `src/` に配置（M5Stack依存）
- **テスト**: `test/pure/` で純粋ロジックのみテスト

## 開発ガイドライン

### テスト戦略
- **Unity Framework**: C/C++ユニットテスト
- **モック使用**: ハードウェア依存を分離
- **カバレッジ目標**: 85.0%以上

### コーディング規約
- **ファイル命名**: クラス名をスネークケースに変換
- **C++11準拠**: `std::make_unique` は使用不可
- **依存性注入**: ハードウェア依存を分離

### 品質ゲート
- **静的解析**: 中重要度警告19件以下
- **テストカバレッジ**: 85.0%以上
- **ビルド成功**: `pio run` でビルド可能

## 重要なファイル

### 設定ファイル
- [platformio.ini](mdc:platformio.ini) - PlatformIO設定
- [scripts/test_coverage.py](mdc:scripts/test_coverage.py) - カバレッジ測定スクリプト

### ドキュメント
- [開発者ガイド](mdc:doc/guide/developer_guide.md) - 開発の基本方針
- [テスト戦略](mdc:doc/operation/testing_strategy.md) - テストの実行方法
- [カバレッジ向上戦略](mdc:doc/project/coverage_strategy.md) - 効率的なカバレッジ向上

### 主要ソースコード
- [InputDisplayState.h](mdc:lib/libaimatix/src/InputDisplayState.h) - メイン状態クラス
- [AlarmLogic.cpp](mdc:lib/libaimatix/src/AlarmLogic.cpp) - アラームロジック
- [DateTimeInputState.cpp](mdc:lib/libaimatix/src/DateTimeInputState.cpp) - 日時入力状態

## 開発コマンド

```bash
# ビルド
pio run

# テスト実行
pio test -e native

# 特定テスト実行
pio test -e native -f pure/test_input_display_pure

# カバレッジ測定
python scripts/test_coverage.py --quick
```

## 注意事項

1. **純粋ロジック**: `lib/libaimatix/src/` のみテスト対象
2. **実装クラス**: `src/` はカバレッジ対象外
3. **モック使用**: ハードウェア依存を分離
4. **段階的テスト**: 効果測定後に無駄なテストを削除
