name: pr-automerge-control
on:
  pull_request_target:
    types:
      - opened
      - reopened
      - ready_for_review
      - converted_to_draft
      - labeled
      - unlabeled
      - edited
      - synchronize

permissions:
  pull-requests: write

jobs:
  control-automerge:
    runs-on: ubuntu-latest
    steps:
      - name: Decide eligibility
        id: gate
        shell: bash
        run: |
          PR_DRAFT='${{ github.event.pull_request.draft }}'
          LABELS='${{ join(github.event.pull_request.labels.*.name, ',') }}'
          ASSOC='${{ github.event.pull_request.author_association }}'

          has_label() { echo ",$LABELS," | grep -qi ",$1," ; }

          eligible=true

          # Draft is not eligible
          [ "$PR_DRAFT" = "true" ] && eligible=false

          # Required labels (automerge or dependencies)
          if ! has_label automerge && ! has_label dependencies; then
            eligible=false
          fi

          # Explicit exclusion labels
          if has_label no-automerge || has_label hold; then
            eligible=false
          fi

          # Exclude external contributions
          case "$ASSOC" in
            OWNER|MEMBER|COLLABORATOR) ;;
            *) eligible=false ;;
          esac

          echo "eligible=$eligible" >> "$GITHUB_OUTPUT"

      - name: Enable auto-merge (squash)
        if: steps.gate.outputs.eligible == 'true'
        uses: peter-evans/enable-pull-request-automerge@v3
        continue-on-error: true
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          pull-request-number: ${{ github.event.pull_request.number }}
          merge-method: squash

      - name: Verify auto-merge state (notice only)
        if: steps.gate.outputs.eligible == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pull = context.payload.pull_request
            if (!pull) {
              core.setFailed('No pull_request payload.')
            } else {
              try {
                const result = await github.graphql(`
                  query($owner:String!, $repo:String!, $number:Int!) {
                    repository(owner:$owner, name:$repo) {
                      pullRequest(number:$number) {
                        number
                        autoMergeRequest { enabledAt }
                      }
                    }
                  }
                `, {
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  number: pull.number,
                })

                const pr = result.repository && result.repository.pullRequest
                if (pr && pr.autoMergeRequest) {
                  core.notice(`Auto-merge enabled (at: ${pr.autoMergeRequest.enabledAt || 'unknown'})`)
                } else {
                  core.notice('Auto-merge not enabled (branch protection or policy may block).')
                }
              } catch (error) {
                const message = (error && error.message) ? error.message : String(error)
                core.notice(`Auto-merge verify check failed: ${message}`)
              }
            }

      - name: Disable auto-merge (if previously enabled)
        if: steps.gate.outputs.eligible != 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pull = context.payload.pull_request
            if (!pull) {
              core.setFailed('No pull_request payload.')
            } else {
              const prId = pull.node_id
              try {
                await github.graphql(
                  `
                  mutation($prId: ID!) {
                    disablePullRequestAutoMerge(input: { pullRequestId: $prId }) {
                      pullRequest { number }
                    }
                  }
                  `,
                  { prId }
                )
                core.notice(`Auto-merge disabled for PR #${pull.number}`)
              } catch (error) {
                const message = (error && error.message) ? error.message : String(error)
                if (message.includes('not enabled')) {
                  core.notice('Auto-merge was already disabled.')
                } else {
                  throw error
                }
              }
            }


