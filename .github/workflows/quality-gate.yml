name: Quality Gate

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review, labeled]
  pull_request_review:
    types: [submitted]
  workflow_dispatch:

# 自動マージで必要な権限（PR/ブランチ操作）
permissions:
  contents: write
  pull-requests: write

# 同一PRの重複実行を抑止
concurrency:
  group: quality-gate-${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  quality-gate:
    # draft PR はスキップ
    if: ${{ !github.event.pull_request.draft }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies (pip)
        run: |
          python -m pip install --upgrade pip
          pip install platformio gcovr

      - name: Baseline build (sanity)
        run: pio run -e native

      - name: Run coverage (quick mode)
        run: |
          python scripts/test_coverage.py --quick

      - name: Upload coverage artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports-${{ github.run_id }}
          path: |
            coverage_reports/**
            coverage_history.json
          if-no-files-found: warn

      - name: Job summary
        if: always()
        shell: bash
        run: |
          echo "## Quality Gate" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "- Workflow: $GITHUB_WORKFLOW" >> "$GITHUB_STEP_SUMMARY"
          echo "- Run ID: $GITHUB_RUN_ID" >> "$GITHUB_STEP_SUMMARY"
          echo "- Artifacts: coverage-reports-$GITHUB_RUN_ID" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"

          # Threshold (best-effort from coverage_config.json)
          THRESHOLD=""
          if [ -f coverage_config.json ]; then
            THRESHOLD=$(grep -o '"threshold"\s*:\s*[0-9.]*' coverage_config.json | tail -n 1 | sed 's/[^0-9.]*//g') || true
            STRICT=$(grep -o '"strict_mode"\s*:\s*\(true\|false\)' coverage_config.json | tail -n 1 | sed 's/.*: //') || true
          fi
          if [ -n "$THRESHOLD" ]; then
            if [ "$STRICT" = "true" ]; then
              echo "- Threshold: ${THRESHOLD}% (strict)" >> "$GITHUB_STEP_SUMMARY"
            else
              echo "- Threshold: ${THRESHOLD}%" >> "$GITHUB_STEP_SUMMARY"
            fi
          else
            echo "- Threshold: (from coverage_config.json or default 80%)" >> "$GITHUB_STEP_SUMMARY"
          fi

          # Actual coverage and status (best-effort from coverage_history.json)
          if [ -f coverage_history.json ]; then
            ACTUAL=$(grep -o '"coverage"\s*:\s*[0-9.]*' coverage_history.json | tail -n 1 | sed 's/[^0-9.]*//g') || true
            QG=$(grep -o '"quality_gate"\s*:\s*\(true\|false\)' coverage_history.json | tail -n 1 | sed 's/.*: //') || true
            if [ -n "$ACTUAL" ]; then
              echo "- Actual: ${ACTUAL}%" >> "$GITHUB_STEP_SUMMARY"
              if [ "$QG" = "true" ]; then
                echo "- Status: ✅ Passed" >> "$GITHUB_STEP_SUMMARY"
              elif [ "$QG" = "false" ]; then
                echo "- Status: ❌ Failed" >> "$GITHUB_STEP_SUMMARY"
              else
                echo "- Status: (unknown)" >> "$GITHUB_STEP_SUMMARY"
              fi
            else
              echo "- Actual: (see artifacts)" >> "$GITHUB_STEP_SUMMARY"
            fi
          else
            echo "- Actual: (see artifacts)" >> "$GITHUB_STEP_SUMMARY"
          fi


  automerge:
    name: Auto-merge when CI passed and hw-ok or approved
    needs: quality-gate
    runs-on: ubuntu-latest
    if: >
      ${{
        (github.event_name == 'pull_request' || github.event_name == 'pull_request_review') &&
        !github.event.pull_request.draft
      }}
    steps:
      - name: Merge PR (squash) when hw-ok or approved
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const pr = context.payload.pull_request;
            if (!pr || pr.state !== 'open') { return; }
            const hasHwOk = Array.isArray(pr.labels) && pr.labels.some(l => l && l.name === 'hw-ok');
            let isApproved = false;
            try {
              const reviews = await github.rest.pulls.listReviews({ owner, repo, pull_number: pr.number });
              isApproved = (reviews.data || []).some(r => r && r.state === 'APPROVED');
            } catch (e) {
              core.warning(`listReviews failed: ${e.message}`);
            }
            if (!hasHwOk && !isApproved) {
              core.info('Skip: need hw-ok label or at least one approval');
              return;
            }
            await github.rest.pulls.merge({
              owner,
              repo,
              pull_number: pr.number,
              merge_method: 'squash'
            });
      - name: Delete head branch (same-repo only)
        if: ${{ github.event.pull_request.head.repo.full_name == github.repository }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const ref = 'heads/' + context.payload.pull_request.head.ref;
            try {
              await github.rest.git.deleteRef({ owner, repo, ref });
            } catch (e) {
              core.warning(`Delete branch skipped: ${e.message}`);
            }
