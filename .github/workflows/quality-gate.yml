name: Quality Gate

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review, labeled]
  pull_request_review:
    types: [submitted]
  workflow_dispatch:

# 自動マージで必要な権限（PR/ブランチ操作）
permissions:
  contents: write
  pull-requests: write

# 同一PRの重複実行を抑止
concurrency:
  group: quality-gate-${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  quality-gate:
    # draft PR はスキップ
    if: ${{ !github.event.pull_request.draft }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies (pip)
        run: |
          python -m pip install --upgrade pip
          pip install platformio gcovr

      - name: Install clang-tidy (ubuntu)
        run: |
          sudo apt-get update
          sudo apt-get install -y clang-tidy

      - name: Baseline build (sanity)
        run: pio run -e native

      - name: Run quality gate (quick mode)
        run: |
          python scripts/quality_gate.py --quick

      - name: Upload coverage artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: quality-gate-artifacts-${{ github.run_id }}
          path: |
            coverage_reports/**
            coverage_history.json
            static_analysis_report.json
          if-no-files-found: warn

      - name: Job summary
        if: always()
        shell: bash
        run: |
          echo "## Quality Gate" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "- Workflow: $GITHUB_WORKFLOW" >> "$GITHUB_STEP_SUMMARY"
          echo "- Run ID: $GITHUB_RUN_ID" >> "$GITHUB_STEP_SUMMARY"
          echo "- Artifacts: quality-gate-artifacts-$GITHUB_RUN_ID" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"

          # Threshold (best-effort from coverage_config.json)
          THRESHOLD=""
          if [ -f coverage_config.json ]; then
            THRESHOLD=$(grep -o '"threshold"\s*:\s*[0-9.]*' coverage_config.json | tail -n 1 | sed 's/[^0-9.]*//g') || true
            STRICT=$(grep -o '"strict_mode"\s*:\s*\(true\|false\)' coverage_config.json | tail -n 1 | sed 's/.*: //') || true
          fi
          if [ -n "$THRESHOLD" ]; then
            if [ "$STRICT" = "true" ]; then
              echo "- Threshold: ${THRESHOLD}% (strict)" >> "$GITHUB_STEP_SUMMARY"
            else
              echo "- Threshold: ${THRESHOLD}%" >> "$GITHUB_STEP_SUMMARY"
            fi
          else
            echo "- Threshold: (from coverage_config.json or default 80%)" >> "$GITHUB_STEP_SUMMARY"
          fi

          # Coverage summary (from latest JSON report if available)
          if [ -f coverage_reports/coverage_summary.json ]; then
            echo "" >> "$GITHUB_STEP_SUMMARY"
            echo "### Coverage" >> "$GITHUB_STEP_SUMMARY"
            python - "$GITHUB_STEP_SUMMARY" << 'PY'
import json, sys
outp = sys.argv[1]
try:
    with open('coverage_reports/coverage_summary.json','r',encoding='utf-8') as f:
        d=json.load(f)
    cov = d.get('overall',{}).get('coverage_percentage') or d.get('coverage_percentage')
    with open(outp,'a',encoding='utf-8') as g:
        g.write(f"- Actual: {cov}%\n")
except Exception as e:
    with open(outp,'a',encoding='utf-8') as g:
        g.write(f"- Coverage summary error: {e}\n")
PY
          else
            # fallback to history
            if [ -f coverage_history.json ]; then
              ACTUAL=$(grep -o '"coverage"\s*:\s*[0-9.]*' coverage_history.json | tail -n 1 | sed 's/[^0-9.]*//g') || true
              echo "" >> "$GITHUB_STEP_SUMMARY"
              echo "### Coverage" >> "$GITHUB_STEP_SUMMARY"
              if [ -n "$ACTUAL" ]; then
                echo "- Actual: ${ACTUAL}%" >> "$GITHUB_STEP_SUMMARY"
              else
                echo "- Actual: (see artifacts)" >> "$GITHUB_STEP_SUMMARY"
              fi
            fi
          fi

          # (static analysis summary moved to a dedicated python step below)

      - name: Job summary (static analysis)
        if: always()
        shell: python
        run: |
          import json, os
          p = 'static_analysis_report.json'
          s = os.environ.get('GITHUB_STEP_SUMMARY')
          if s and os.path.exists(p):
              with open(p, encoding='utf-8') as f:
                  d = json.load(f)
              t = d.get('totals', {})
              th = d.get('thresholds', {})
              passed = d.get('passed', False)
              with open(s, 'a', encoding='utf-8') as g:
                  g.write("\n### Static Analysis (Clang-Tidy)\n")
                  g.write(f"- Environment: {d.get('environment','native')}\n")
                  g.write(f"- Totals: High={t.get('high',0)}, Medium={t.get('medium',0)}, Low={t.get('low',0)}\n")
                  g.write(f"- Thresholds: High={th.get('high','-')}, Medium={th.get('medium','-')}, Low={th.get('low','-')}\n")
                  g.write(f"- Status: {'✅ Passed' if passed else '❌ Failed'}\n")


  automerge:
    name: Auto-merge when CI passed and hw-ok or approved
    needs: quality-gate
    runs-on: ubuntu-latest
    if: >
      ${{
        (github.event_name == 'pull_request' || github.event_name == 'pull_request_review') &&
        !github.event.pull_request.draft
      }}
    steps:
      - name: Merge (and delete branch on success)
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const pr = context.payload.pull_request;
            if (!pr || pr.state !== 'open') { return; }

            // 条件: hw-ok ラベル or 承認
            const hasHwOk = Array.isArray(pr.labels) && pr.labels.some(l => l && l.name === 'hw-ok');
            let isApproved = false;
            try {
              const reviews = await github.rest.pulls.listReviews({ owner, repo, pull_number: pr.number });
              isApproved = (reviews.data || []).some(r => r && r.state === 'APPROVED');
            } catch (e) {
              core.warning(`listReviews failed: ${e.message}`);
            }
            if (!hasHwOk && !isApproved) {
              core.info('Skip: need hw-ok label or at least one approval');
              return;
            }

            // マージ実行
            let merged = false;
            try {
              const res = await github.rest.pulls.merge({ owner, repo, pull_number: pr.number, merge_method: 'squash' });
              merged = !!(res && res.data && res.data.merged);
              core.info(`merge result: ${merged}`);
            } catch (e) {
              core.warning(`Merge failed: ${e.message}`);
            }

            // 成功時のみブランチ削除（同一リポジトリに限る）
            if (merged) {
              const sameRepo = pr.head && pr.head.repo && (pr.head.repo.full_name === `${owner}/${repo}`);
              if (sameRepo) {
                const ref = 'heads/' + pr.head.ref;
                try {
                  await github.rest.git.deleteRef({ owner, repo, ref });
                  core.info(`Deleted branch ${ref}`);
                } catch (e) {
                  core.warning(`Delete branch skipped: ${e.message}`);
                }
              }
            }
